/*
*  Ocelet spatial modelling language.   www.ocelet.org
*  Copyright Cirad 2010-2018
*
*  This software is a domain specific programming language dedicated to writing
*  spatially explicit models and performing spatial dynamics simulations.
*
*  This software is governed by the CeCILL license under French law and
*  abiding by the rules of distribution of free software.  You can  use,
*  modify and/ or redistribute the software under the terms of the CeCILL
*  license as circulated by CEA, CNRS and INRIA at the following URL
*  "http://www.cecill.info".
*  As a counterpart to the access to the source code and  rights to copy,
*  modify and redistribute granted by the license, users are provided only
*  with a limited warranty  and the software's author,  the holder of the
*  economic rights,  and the successive licensors  have only limited
*  liability.
*  The fact that you are presently reading this means that you have had
*  knowledge of the CeCILL license and that you accept its terms.
*/
grammar fr.ocelet.lang.Ocelet with org.eclipse.xtext.xbase.Xbase

import "http://www.eclipse.org/xtext/xbase/Xbase"
import "http://www.eclipse.org/xtext/common/JavaVMTypes" as types

generate ocelet "http://www.ocelet.fr/lang/Ocelet"

Model: 
	('package' name=Fqn)?
	(modelns += ModEln)*;
	
ModEln:
	Entity|Relation|Scenario|Strucdef|Datafacer|Metadata|Agregdef;

// ------ Metadata ------
Metadata:
 {Metadata}
 'metadata' '{'
     ('description' desc = STRING)?
     ('webpage' webp = STRING)?
     (paramdefs += Parameter)*
	'}'
;

Parameter : 'parameter' ptype =JvmTypeReference name=ID '{'
	(paramparts += Parampart)*
  '}'
;

Parampart : Paramunit | Paramdefa | Rangevals | Paradesc | Paraopt;

Paramunit :'unit' parunit = STRING;
Paramdefa :'default' pardefa = (SignedNumber | STRING | 'null' | 'false' | 'true');
Rangevals :'range' parmin=SignedNumber '..' parmax=SignedNumber;
Paradesc  :'description' pardesc = STRING;
Paraopt   :'optional' paropt = STRING;
	
// ------ Entity ------

Entity:
	'entity' name=ID '{'
	(entelns += EntityElements)*
	'}'
;

EntityElements: PropertyDef|ServiceDef|ConstructorDef;

PropertyDef:
	'property' type=JvmTypeReference name=ID
;

ServiceDef:
	'service' (type=JvmTypeReference)? name=ID '('(params+=FullJvmFormalParameter(',' params+=FullJvmFormalParameter)*)?')'
     body=XBlockExpression
;

ConstructorDef:
	'init' name=ID '('(params+=FullJvmFormalParameter(',' params+=FullJvmFormalParameter)*)?')'
     body=XBlockExpression
;

// ------ Relation ------

Relation:
	'relation' name=ID '<' roles += Role ',' roles+= Role (',' roles+= Role)* '>' '{'
//	('type' graphtype =Fqn )?
	(relelns += RelElements)*
	'}'
;

Role : type=[Entity] name=ID;

RelElements : RelPropertyDef|InteractionDef|Filterdef;

RelPropertyDef:
	'property' type=JvmTypeReference name=ID
	;

InteractionDef:
	'interaction' name=ID '('(params+=FullJvmFormalParameter(',' params+=FullJvmFormalParameter)*)?')'
     body=XBlockExpression
     ('agg' '{' (comitexpressions += Comitexpr)* '}')?
;

Comitexpr:
    rol=[Role] '.' prop=ID (usepreval?='+<<'|'<<') agrfunc= JvmTypeReference
;

Filterdef :
 'filter' name=ID '('(params+=FullJvmFormalParameter(',' params+=FullJvmFormalParameter)*)?')'
 body = XBlockExpression;
 
 // ------ Structures ------
Strucdef:
	'structure' name=ID ('<' typeArgument = Fqn '>')? ('extends' superType = Fqn)?	
	 '{'
	   (strucelns += StrucEln)*
	'}';

StrucEln : StrucVarDef | StrucFuncDef;

StrucVarDef:
	type=JvmTypeReference name=ValidID ';'?;
	
StrucFuncDef :
	 'function'	(type=JvmTypeReference)? name=ID
	 '('(params+=FullJvmFormalParameter(',' params+=FullJvmFormalParameter)*)?')'
     body=XBlockExpression
;

// ------ Datafacer ------

Datafacer :
	'datafacer' name =ID '{'
	   ('store'|'data') storetype = ValidID
	        '(' (arguments+=XExpression (',' arguments+=XExpression)*)? ')'
	    (matchbox += Match)*
	'}'
;

Match : 'match' mtype=[Matchtype] '{'
	   (matchprops += Mdef)*
	  '}'
;

Matchtype :	Entity | Strucdef ;

Mdef : prop = ID ':' colname=STRING; 


//------ Agregation functions ------

Agregdef : 'aggreg' type=JvmTypeReference name=ID
	body=XBlockExpression
;

//------ Scenario ------

Scenario:
	'scenario' (type=JvmTypeReference)? name=ID
	 ('('(params+=FullJvmFormalParameter(',' params+=FullJvmFormalParameter)*)?')')?
     body=XBlockExpression
;

//------ XBase customization ------
XVariableDeclaration returns XExpression:
	{XVariableDeclaration}
	(writeable?=('create'|'let')|('fix'|'const')) (=>(type=JvmTypeReference name=ValidID) | name=ValidID) ('=' right=XExpression)?;

XMemberFeatureCall returns XExpression:
  XPrimaryExpression
  (=>({XAssignment.assignable=current} ('.'|explicitStatic?="|") feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign) value=XAssignment
  |=>({XMemberFeatureCall.memberCallTarget=current} ("."|nullSafe?="?."|explicitStatic?="|")) 
    ('<' typeArguments+=JvmArgumentTypeReference (',' typeArguments+=JvmArgumentTypeReference)* '>')?  
    feature=[types::JvmIdentifiableElement|IdOrSuper] (
      =>explicitOperationCall?='(' 
        (
            memberCallArguments+=XShortClosure
          | memberCallArguments+=XExpression (',' memberCallArguments+=XExpression)*
        )? 
      ')')?
      memberCallArguments+=XClosure?
    )*;

StaticQualifier:
        (ValidID '|')+
;

//------ Data and terminal rules ------

Fqn: ID('.'ID)*;

SignedNumber: '-'? Number;
	