module fr.ocelet.lang.GenerateOcelet

import org.eclipse.xtext.xtext.generator.*
import org.eclipse.xtext.xtext.generator.model.project.*
import parser.antlr.*
var rootPath = ".."

Workflow {
	
	component = XtextGenerator {
		
		configuration = {
			project = StandardProjectConfig {
				baseName = "fr.ocelet"
				rootPath = rootPath
				eclipsePlugin = {
					enabled = true
				}
				createEclipseMetaData = true
			}
			code = {
				encoding = "UTF-8"
				lineDelimiter = "\n"
				fileHeader = "/*\n * generated by Xtext \${version}\n */"
			}
			
			
		}
		
		language = StandardLanguage{
			
			name = "fr.ocelet.lang.Ocelet"
			fileExtensions = "oclt"
				parserGenerator = {
	 			 options = {
	   				 backtrack = false
	   				 //memoize = true
	   				// ignoreCase = true
	                 //classSplitting=true
	                 //fieldsPerClass = "1200" 
	                 //methodsPerClass = "1200"
	  				}
	  				//antlrParam = "-Xconversiontimeout"
                  //antlrParam = "5000"
			}
			serializer = {
				generateStub = false
			}
			
			
		}
	 	/*language = StandardLanguage {
	 		
			name = "fr.ocelet.lang.Ocelet"
			fileExtensions = "oclt"
		
			parserGenerator = {
	 			 options = {
	   				 backtrack = false
	   				 memoize = true
	   				// ignoreCase = true
	                 //classSplitting=true
	                 //fieldsPerClass = "1200" 
	                 //methodsPerClass = "1200"
	  				}
	  				//antlrParam = "-Xconversiontimeout"
                  //antlrParam = "5000"
			}
			serializer = {
				generateStub = false
			}
		
			//validator = {
				// composedCheck = "org.eclipse.xtext.validation.NamesAreUniqueValidator"
			//}
		}*/
		
		/*language =  XtextGeneratorLanguage {
			name = "fr.ocelet.lang.Ocelet"
			fileExtensions = "oclt"
			referencedResource = "platform:/resource/org.eclipse.xtext.xbase/model/Xbase.genmodel"
			
			 fragment = grammarAccess.GrammarAccessFragment2 {}
		    fragment = ecore.EMFGeneratorFragment2 {}
		    fragment = serializer.SerializerFragment2 {}
		    fragment = resourceFactory.ResourceFactoryFragment2 {}
		    fragment = parser.antlr.XtextAntlrGeneratorFragment2 {}
		    fragment = validation.ValidatorFragment2 {}
		    fragment = scoping.ImportNamespacesScopingFragment2 {}
		    fragment = exporting.QualifiedNamesFragment2 {}
		    fragment = builder.BuilderIntegrationFragment2 {}
		    fragment = generator.GeneratorFragment2 {}
		    fragment = formatting.Formatter2Fragment2 {}
		    fragment = ui.labeling.LabelProviderFragment2 {}
		    fragment = ui.outline.QuickOutlineFragment2 {}
		    fragment = ui.outline.OutlineTreeProviderFragment2 {}
		    fragment = ui.quickfix.QuickfixProviderFragment2 {}
		    fragment = ui.contentAssist.ContentAssistFragment2 {}   
		    fragment = ui.refactoring.RefactorElementNameFragment2 {}
		    fragment = types.TypesGeneratorFragment2 {}
		    fragment = xbase.XtypeGeneratorFragment2 {}
		    fragment = xbase.XbaseGeneratorFragment2 {}
		    fragment = ui.templates.CodetemplatesGeneratorFragment2 {}
		    fragment = ui.compare.CompareFragment2 {}
		    fragment = idea.parser.antlr.XtextAntlrIDEAGeneratorFragment {}
		    fragment = idea.IdeaPluginGenerator {}
		    fragment = web.WebIntegrationFragment {
		        framework = "Ace"
		    }
		    fragment = ui.projectWizard.TemplateProjectWizardFragment {}
		    fragment = ui.fileWizard.TemplateFileWizardFragment {}
		    
		    fragment = parser.antlr.XtextAntlrGeneratorFragment auto-inject {
		    	
                  options = {
                  	
                      backtrack = true
                      memoize = true
                      classSplitting=true
                      fieldsPerClass = "1200" 
                      methodsPerClass = "1200"
                  }
                  
                  antlrParam = "-Xconversiontimeout"
                  antlrParam = "5000"
                }
		}*/
		
	}
}
