/*
 * generated by Xtext 2.12.0
 */
package fr.ocelet.lang.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.xbase.services.XbaseGrammarAccess;
import org.eclipse.xtext.xbase.services.XtypeGrammarAccess;

@Singleton
public class OceletGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.ocelet.lang.Ocelet.Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Keyword cPackageKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cNameAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cNameFqnParserRuleCall_0_1_0 = (RuleCall)cNameAssignment_0_1.eContents().get(0);
		private final Assignment cModelnsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cModelnsModElnParserRuleCall_1_0 = (RuleCall)cModelnsAssignment_1.eContents().get(0);
		
		//Model:
		//	('package' name=Fqn)?
		//	modelns+=ModEln*;
		@Override public ParserRule getRule() { return rule; }
		
		//('package' name=Fqn)? modelns+=ModEln*
		public Group getGroup() { return cGroup; }
		
		//('package' name=Fqn)?
		public Group getGroup_0() { return cGroup_0; }
		
		//'package'
		public Keyword getPackageKeyword_0_0() { return cPackageKeyword_0_0; }
		
		//name=Fqn
		public Assignment getNameAssignment_0_1() { return cNameAssignment_0_1; }
		
		//Fqn
		public RuleCall getNameFqnParserRuleCall_0_1_0() { return cNameFqnParserRuleCall_0_1_0; }
		
		//modelns+=ModEln*
		public Assignment getModelnsAssignment_1() { return cModelnsAssignment_1; }
		
		//ModEln
		public RuleCall getModelnsModElnParserRuleCall_1_0() { return cModelnsModElnParserRuleCall_1_0; }
	}
	public class ModElnElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.ocelet.lang.Ocelet.ModEln");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cEntityParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRelationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cScenarioParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cStrucdefParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cDatafacerParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cMetadataParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cAgregdefParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		
		//ModEln:
		//	Entity | Relation | Scenario | Strucdef | Datafacer | Metadata | Agregdef;
		@Override public ParserRule getRule() { return rule; }
		
		//Entity | Relation | Scenario | Strucdef | Datafacer | Metadata | Agregdef
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Entity
		public RuleCall getEntityParserRuleCall_0() { return cEntityParserRuleCall_0; }
		
		//Relation
		public RuleCall getRelationParserRuleCall_1() { return cRelationParserRuleCall_1; }
		
		//Scenario
		public RuleCall getScenarioParserRuleCall_2() { return cScenarioParserRuleCall_2; }
		
		//Strucdef
		public RuleCall getStrucdefParserRuleCall_3() { return cStrucdefParserRuleCall_3; }
		
		//Datafacer
		public RuleCall getDatafacerParserRuleCall_4() { return cDatafacerParserRuleCall_4; }
		
		//Metadata
		public RuleCall getMetadataParserRuleCall_5() { return cMetadataParserRuleCall_5; }
		
		//Agregdef
		public RuleCall getAgregdefParserRuleCall_6() { return cAgregdefParserRuleCall_6; }
	}
	public class MetadataElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.ocelet.lang.Ocelet.Metadata");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMetadataAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cMetadataKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cDescriptionKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cDescAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cDescSTRINGTerminalRuleCall_3_1_0 = (RuleCall)cDescAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cWebpageKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cWebpAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cWebpSTRINGTerminalRuleCall_4_1_0 = (RuleCall)cWebpAssignment_4_1.eContents().get(0);
		private final Assignment cParamdefsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cParamdefsParameterParserRuleCall_5_0 = (RuleCall)cParamdefsAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//// ------ Metadata ------
		//Metadata:
		//	{Metadata}
		//	'metadata' '{' ('description' desc=STRING)? ('webpage' webp=STRING)?
		//	paramdefs+=Parameter*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{Metadata} 'metadata' '{' ('description' desc=STRING)? ('webpage' webp=STRING)? paramdefs+=Parameter* '}'
		public Group getGroup() { return cGroup; }
		
		//{Metadata}
		public Action getMetadataAction_0() { return cMetadataAction_0; }
		
		//'metadata'
		public Keyword getMetadataKeyword_1() { return cMetadataKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//('description' desc=STRING)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'description'
		public Keyword getDescriptionKeyword_3_0() { return cDescriptionKeyword_3_0; }
		
		//desc=STRING
		public Assignment getDescAssignment_3_1() { return cDescAssignment_3_1; }
		
		//STRING
		public RuleCall getDescSTRINGTerminalRuleCall_3_1_0() { return cDescSTRINGTerminalRuleCall_3_1_0; }
		
		//('webpage' webp=STRING)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'webpage'
		public Keyword getWebpageKeyword_4_0() { return cWebpageKeyword_4_0; }
		
		//webp=STRING
		public Assignment getWebpAssignment_4_1() { return cWebpAssignment_4_1; }
		
		//STRING
		public RuleCall getWebpSTRINGTerminalRuleCall_4_1_0() { return cWebpSTRINGTerminalRuleCall_4_1_0; }
		
		//paramdefs+=Parameter*
		public Assignment getParamdefsAssignment_5() { return cParamdefsAssignment_5; }
		
		//Parameter
		public RuleCall getParamdefsParameterParserRuleCall_5_0() { return cParamdefsParameterParserRuleCall_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class ParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.ocelet.lang.Ocelet.Parameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cParameterKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPtypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPtypeJvmTypeReferenceParserRuleCall_1_0 = (RuleCall)cPtypeAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cParampartsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cParampartsParampartParserRuleCall_4_0 = (RuleCall)cParampartsAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Parameter:
		//	'parameter' ptype=JvmTypeReference name=ID '{'
		//	paramparts+=Parampart*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'parameter' ptype=JvmTypeReference name=ID '{' paramparts+=Parampart* '}'
		public Group getGroup() { return cGroup; }
		
		//'parameter'
		public Keyword getParameterKeyword_0() { return cParameterKeyword_0; }
		
		//ptype=JvmTypeReference
		public Assignment getPtypeAssignment_1() { return cPtypeAssignment_1; }
		
		//JvmTypeReference
		public RuleCall getPtypeJvmTypeReferenceParserRuleCall_1_0() { return cPtypeJvmTypeReferenceParserRuleCall_1_0; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//paramparts+=Parampart*
		public Assignment getParampartsAssignment_4() { return cParampartsAssignment_4; }
		
		//Parampart
		public RuleCall getParampartsParampartParserRuleCall_4_0() { return cParampartsParampartParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class ParampartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.ocelet.lang.Ocelet.Parampart");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cParamunitParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cParamdefaParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cRangevalsParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cParadescParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cParaoptParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//Parampart:
		//	Paramunit | Paramdefa | Rangevals | Paradesc | Paraopt;
		@Override public ParserRule getRule() { return rule; }
		
		//Paramunit | Paramdefa | Rangevals | Paradesc | Paraopt
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Paramunit
		public RuleCall getParamunitParserRuleCall_0() { return cParamunitParserRuleCall_0; }
		
		//Paramdefa
		public RuleCall getParamdefaParserRuleCall_1() { return cParamdefaParserRuleCall_1; }
		
		//Rangevals
		public RuleCall getRangevalsParserRuleCall_2() { return cRangevalsParserRuleCall_2; }
		
		//Paradesc
		public RuleCall getParadescParserRuleCall_3() { return cParadescParserRuleCall_3; }
		
		//Paraopt
		public RuleCall getParaoptParserRuleCall_4() { return cParaoptParserRuleCall_4; }
	}
	public class ParamunitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.ocelet.lang.Ocelet.Paramunit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cUnitKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cParunitAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cParunitSTRINGTerminalRuleCall_1_0 = (RuleCall)cParunitAssignment_1.eContents().get(0);
		
		//Paramunit:
		//	'unit' parunit=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//'unit' parunit=STRING
		public Group getGroup() { return cGroup; }
		
		//'unit'
		public Keyword getUnitKeyword_0() { return cUnitKeyword_0; }
		
		//parunit=STRING
		public Assignment getParunitAssignment_1() { return cParunitAssignment_1; }
		
		//STRING
		public RuleCall getParunitSTRINGTerminalRuleCall_1_0() { return cParunitSTRINGTerminalRuleCall_1_0; }
	}
	public class ParamdefaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.ocelet.lang.Ocelet.Paramdefa");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDefaultKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPardefaAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cPardefaAlternatives_1_0 = (Alternatives)cPardefaAssignment_1.eContents().get(0);
		private final RuleCall cPardefaSignedNumberParserRuleCall_1_0_0 = (RuleCall)cPardefaAlternatives_1_0.eContents().get(0);
		private final RuleCall cPardefaSTRINGTerminalRuleCall_1_0_1 = (RuleCall)cPardefaAlternatives_1_0.eContents().get(1);
		private final Keyword cPardefaNullKeyword_1_0_2 = (Keyword)cPardefaAlternatives_1_0.eContents().get(2);
		private final Keyword cPardefaFalseKeyword_1_0_3 = (Keyword)cPardefaAlternatives_1_0.eContents().get(3);
		private final Keyword cPardefaTrueKeyword_1_0_4 = (Keyword)cPardefaAlternatives_1_0.eContents().get(4);
		
		//Paramdefa:
		//	'default' pardefa=(SignedNumber | STRING | 'null' | 'false' | 'true');
		@Override public ParserRule getRule() { return rule; }
		
		//'default' pardefa=(SignedNumber | STRING | 'null' | 'false' | 'true')
		public Group getGroup() { return cGroup; }
		
		//'default'
		public Keyword getDefaultKeyword_0() { return cDefaultKeyword_0; }
		
		//pardefa=(SignedNumber | STRING | 'null' | 'false' | 'true')
		public Assignment getPardefaAssignment_1() { return cPardefaAssignment_1; }
		
		//(SignedNumber | STRING | 'null' | 'false' | 'true')
		public Alternatives getPardefaAlternatives_1_0() { return cPardefaAlternatives_1_0; }
		
		//SignedNumber
		public RuleCall getPardefaSignedNumberParserRuleCall_1_0_0() { return cPardefaSignedNumberParserRuleCall_1_0_0; }
		
		//STRING
		public RuleCall getPardefaSTRINGTerminalRuleCall_1_0_1() { return cPardefaSTRINGTerminalRuleCall_1_0_1; }
		
		//'null'
		public Keyword getPardefaNullKeyword_1_0_2() { return cPardefaNullKeyword_1_0_2; }
		
		//'false'
		public Keyword getPardefaFalseKeyword_1_0_3() { return cPardefaFalseKeyword_1_0_3; }
		
		//'true'
		public Keyword getPardefaTrueKeyword_1_0_4() { return cPardefaTrueKeyword_1_0_4; }
	}
	public class RangevalsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.ocelet.lang.Ocelet.Rangevals");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRangeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cParminAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cParminSignedNumberParserRuleCall_1_0 = (RuleCall)cParminAssignment_1.eContents().get(0);
		private final Keyword cFullStopFullStopKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cParmaxAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cParmaxSignedNumberParserRuleCall_3_0 = (RuleCall)cParmaxAssignment_3.eContents().get(0);
		
		//Rangevals:
		//	'range' parmin=SignedNumber '..' parmax=SignedNumber;
		@Override public ParserRule getRule() { return rule; }
		
		//'range' parmin=SignedNumber '..' parmax=SignedNumber
		public Group getGroup() { return cGroup; }
		
		//'range'
		public Keyword getRangeKeyword_0() { return cRangeKeyword_0; }
		
		//parmin=SignedNumber
		public Assignment getParminAssignment_1() { return cParminAssignment_1; }
		
		//SignedNumber
		public RuleCall getParminSignedNumberParserRuleCall_1_0() { return cParminSignedNumberParserRuleCall_1_0; }
		
		//'..'
		public Keyword getFullStopFullStopKeyword_2() { return cFullStopFullStopKeyword_2; }
		
		//parmax=SignedNumber
		public Assignment getParmaxAssignment_3() { return cParmaxAssignment_3; }
		
		//SignedNumber
		public RuleCall getParmaxSignedNumberParserRuleCall_3_0() { return cParmaxSignedNumberParserRuleCall_3_0; }
	}
	public class ParadescElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.ocelet.lang.Ocelet.Paradesc");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDescriptionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPardescAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPardescSTRINGTerminalRuleCall_1_0 = (RuleCall)cPardescAssignment_1.eContents().get(0);
		
		//Paradesc:
		//	'description' pardesc=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//'description' pardesc=STRING
		public Group getGroup() { return cGroup; }
		
		//'description'
		public Keyword getDescriptionKeyword_0() { return cDescriptionKeyword_0; }
		
		//pardesc=STRING
		public Assignment getPardescAssignment_1() { return cPardescAssignment_1; }
		
		//STRING
		public RuleCall getPardescSTRINGTerminalRuleCall_1_0() { return cPardescSTRINGTerminalRuleCall_1_0; }
	}
	public class ParaoptElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.ocelet.lang.Ocelet.Paraopt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOptionalKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cParoptAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cParoptSTRINGTerminalRuleCall_1_0 = (RuleCall)cParoptAssignment_1.eContents().get(0);
		
		//Paraopt:
		//	'optional' paropt=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//'optional' paropt=STRING
		public Group getGroup() { return cGroup; }
		
		//'optional'
		public Keyword getOptionalKeyword_0() { return cOptionalKeyword_0; }
		
		//paropt=STRING
		public Assignment getParoptAssignment_1() { return cParoptAssignment_1; }
		
		//STRING
		public RuleCall getParoptSTRINGTerminalRuleCall_1_0() { return cParoptSTRINGTerminalRuleCall_1_0; }
	}
	public class EntityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.ocelet.lang.Ocelet.Entity");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEntityKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cEntelnsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cEntelnsEntityElementsParserRuleCall_3_0 = (RuleCall)cEntelnsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//// ------ Entity ------
		//Entity:
		//	'entity' name=ID '{'
		//	entelns+=EntityElements*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'entity' name=ID '{' entelns+=EntityElements* '}'
		public Group getGroup() { return cGroup; }
		
		//'entity'
		public Keyword getEntityKeyword_0() { return cEntityKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//entelns+=EntityElements*
		public Assignment getEntelnsAssignment_3() { return cEntelnsAssignment_3; }
		
		//EntityElements
		public RuleCall getEntelnsEntityElementsParserRuleCall_3_0() { return cEntelnsEntityElementsParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class EntityElementsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.ocelet.lang.Ocelet.EntityElements");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPropertyDefParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cServiceDefParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cConstructorDefParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//EntityElements:
		//	PropertyDef | ServiceDef | ConstructorDef;
		@Override public ParserRule getRule() { return rule; }
		
		//PropertyDef | ServiceDef | ConstructorDef
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//PropertyDef
		public RuleCall getPropertyDefParserRuleCall_0() { return cPropertyDefParserRuleCall_0; }
		
		//ServiceDef
		public RuleCall getServiceDefParserRuleCall_1() { return cServiceDefParserRuleCall_1; }
		
		//ConstructorDef
		public RuleCall getConstructorDefParserRuleCall_2() { return cConstructorDefParserRuleCall_2; }
	}
	public class PropertyDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.ocelet.lang.Ocelet.PropertyDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPropertyKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeJvmTypeReferenceParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//PropertyDef:
		//	'property' type=JvmTypeReference name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'property' type=JvmTypeReference name=ID
		public Group getGroup() { return cGroup; }
		
		//'property'
		public Keyword getPropertyKeyword_0() { return cPropertyKeyword_0; }
		
		//type=JvmTypeReference
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//JvmTypeReference
		public RuleCall getTypeJvmTypeReferenceParserRuleCall_1_0() { return cTypeJvmTypeReferenceParserRuleCall_1_0; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
	}
	public class ServiceDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.ocelet.lang.Ocelet.ServiceDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cServiceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeJvmTypeReferenceParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cParamsAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cParamsFullJvmFormalParameterParserRuleCall_4_0_0 = (RuleCall)cParamsAssignment_4_0.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cGroup_4.eContents().get(1);
		private final Keyword cCommaKeyword_4_1_0 = (Keyword)cGroup_4_1.eContents().get(0);
		private final Assignment cParamsAssignment_4_1_1 = (Assignment)cGroup_4_1.eContents().get(1);
		private final RuleCall cParamsFullJvmFormalParameterParserRuleCall_4_1_1_0 = (RuleCall)cParamsAssignment_4_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cBodyAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cBodyXBlockExpressionParserRuleCall_6_0 = (RuleCall)cBodyAssignment_6.eContents().get(0);
		
		//ServiceDef:
		//	'service' type=JvmTypeReference? name=ID '(' (params+=FullJvmFormalParameter (',' params+=FullJvmFormalParameter)*)?
		//	')'
		//	body=XBlockExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//'service' type=JvmTypeReference? name=ID '(' (params+=FullJvmFormalParameter (',' params+=FullJvmFormalParameter)*)? ')'
		//body=XBlockExpression
		public Group getGroup() { return cGroup; }
		
		//'service'
		public Keyword getServiceKeyword_0() { return cServiceKeyword_0; }
		
		//type=JvmTypeReference?
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//JvmTypeReference
		public RuleCall getTypeJvmTypeReferenceParserRuleCall_1_0() { return cTypeJvmTypeReferenceParserRuleCall_1_0; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }
		
		//(params+=FullJvmFormalParameter (',' params+=FullJvmFormalParameter)*)?
		public Group getGroup_4() { return cGroup_4; }
		
		//params+=FullJvmFormalParameter
		public Assignment getParamsAssignment_4_0() { return cParamsAssignment_4_0; }
		
		//FullJvmFormalParameter
		public RuleCall getParamsFullJvmFormalParameterParserRuleCall_4_0_0() { return cParamsFullJvmFormalParameterParserRuleCall_4_0_0; }
		
		//(',' params+=FullJvmFormalParameter)*
		public Group getGroup_4_1() { return cGroup_4_1; }
		
		//','
		public Keyword getCommaKeyword_4_1_0() { return cCommaKeyword_4_1_0; }
		
		//params+=FullJvmFormalParameter
		public Assignment getParamsAssignment_4_1_1() { return cParamsAssignment_4_1_1; }
		
		//FullJvmFormalParameter
		public RuleCall getParamsFullJvmFormalParameterParserRuleCall_4_1_1_0() { return cParamsFullJvmFormalParameterParserRuleCall_4_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
		
		//body=XBlockExpression
		public Assignment getBodyAssignment_6() { return cBodyAssignment_6; }
		
		//XBlockExpression
		public RuleCall getBodyXBlockExpressionParserRuleCall_6_0() { return cBodyXBlockExpressionParserRuleCall_6_0; }
	}
	public class ConstructorDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.ocelet.lang.Ocelet.ConstructorDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInitKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cParamsAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cParamsFullJvmFormalParameterParserRuleCall_3_0_0 = (RuleCall)cParamsAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cParamsAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cParamsFullJvmFormalParameterParserRuleCall_3_1_1_0 = (RuleCall)cParamsAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cBodyAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cBodyXBlockExpressionParserRuleCall_5_0 = (RuleCall)cBodyAssignment_5.eContents().get(0);
		
		//ConstructorDef:
		//	'init' name=ID '(' (params+=FullJvmFormalParameter (',' params+=FullJvmFormalParameter)*)? ')'
		//	body=XBlockExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//'init' name=ID '(' (params+=FullJvmFormalParameter (',' params+=FullJvmFormalParameter)*)? ')' body=XBlockExpression
		public Group getGroup() { return cGroup; }
		
		//'init'
		public Keyword getInitKeyword_0() { return cInitKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//(params+=FullJvmFormalParameter (',' params+=FullJvmFormalParameter)*)?
		public Group getGroup_3() { return cGroup_3; }
		
		//params+=FullJvmFormalParameter
		public Assignment getParamsAssignment_3_0() { return cParamsAssignment_3_0; }
		
		//FullJvmFormalParameter
		public RuleCall getParamsFullJvmFormalParameterParserRuleCall_3_0_0() { return cParamsFullJvmFormalParameterParserRuleCall_3_0_0; }
		
		//(',' params+=FullJvmFormalParameter)*
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//','
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }
		
		//params+=FullJvmFormalParameter
		public Assignment getParamsAssignment_3_1_1() { return cParamsAssignment_3_1_1; }
		
		//FullJvmFormalParameter
		public RuleCall getParamsFullJvmFormalParameterParserRuleCall_3_1_1_0() { return cParamsFullJvmFormalParameterParserRuleCall_3_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
		
		//body=XBlockExpression
		public Assignment getBodyAssignment_5() { return cBodyAssignment_5; }
		
		//XBlockExpression
		public RuleCall getBodyXBlockExpressionParserRuleCall_5_0() { return cBodyXBlockExpressionParserRuleCall_5_0; }
	}
	public class RelationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.ocelet.lang.Ocelet.Relation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRelationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLessThanSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRolesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRolesRoleParserRuleCall_3_0 = (RuleCall)cRolesAssignment_3.eContents().get(0);
		private final Keyword cCommaKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cRolesAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cRolesRoleParserRuleCall_5_0 = (RuleCall)cRolesAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cCommaKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cRolesAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cRolesRoleParserRuleCall_6_1_0 = (RuleCall)cRolesAssignment_6_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cLeftCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cRelelnsAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cRelelnsRelElementsParserRuleCall_9_0 = (RuleCall)cRelelnsAssignment_9.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_10 = (Keyword)cGroup.eContents().get(10);
		
		//// ------ Relation ------
		//Relation:
		//	'relation' name=ID '<' roles+=Role ',' roles+=Role (',' roles+=Role)* '>' '{'
		//	//	('type' graphtype =Fqn )?
		//	relelns+=RelElements*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'relation' name=ID '<' roles+=Role ',' roles+=Role (',' roles+=Role)* '>' '{' //	('type' graphtype =Fqn )?
		//relelns+=RelElements* '}'
		public Group getGroup() { return cGroup; }
		
		//'relation'
		public Keyword getRelationKeyword_0() { return cRelationKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'<'
		public Keyword getLessThanSignKeyword_2() { return cLessThanSignKeyword_2; }
		
		//roles+=Role
		public Assignment getRolesAssignment_3() { return cRolesAssignment_3; }
		
		//Role
		public RuleCall getRolesRoleParserRuleCall_3_0() { return cRolesRoleParserRuleCall_3_0; }
		
		//','
		public Keyword getCommaKeyword_4() { return cCommaKeyword_4; }
		
		//roles+=Role
		public Assignment getRolesAssignment_5() { return cRolesAssignment_5; }
		
		//Role
		public RuleCall getRolesRoleParserRuleCall_5_0() { return cRolesRoleParserRuleCall_5_0; }
		
		//(',' roles+=Role)*
		public Group getGroup_6() { return cGroup_6; }
		
		//','
		public Keyword getCommaKeyword_6_0() { return cCommaKeyword_6_0; }
		
		//roles+=Role
		public Assignment getRolesAssignment_6_1() { return cRolesAssignment_6_1; }
		
		//Role
		public RuleCall getRolesRoleParserRuleCall_6_1_0() { return cRolesRoleParserRuleCall_6_1_0; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_7() { return cGreaterThanSignKeyword_7; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_8() { return cLeftCurlyBracketKeyword_8; }
		
		////	('type' graphtype =Fqn )?
		//relelns+=RelElements*
		public Assignment getRelelnsAssignment_9() { return cRelelnsAssignment_9; }
		
		//RelElements
		public RuleCall getRelelnsRelElementsParserRuleCall_9_0() { return cRelelnsRelElementsParserRuleCall_9_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_10() { return cRightCurlyBracketKeyword_10; }
	}
	public class RoleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.ocelet.lang.Ocelet.Role");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cTypeEntityCrossReference_0_0 = (CrossReference)cTypeAssignment_0.eContents().get(0);
		private final RuleCall cTypeEntityIDTerminalRuleCall_0_0_1 = (RuleCall)cTypeEntityCrossReference_0_0.eContents().get(1);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Role:
		//	type=[Entity] name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//type=[Entity] name=ID
		public Group getGroup() { return cGroup; }
		
		//type=[Entity]
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//[Entity]
		public CrossReference getTypeEntityCrossReference_0_0() { return cTypeEntityCrossReference_0_0; }
		
		//ID
		public RuleCall getTypeEntityIDTerminalRuleCall_0_0_1() { return cTypeEntityIDTerminalRuleCall_0_0_1; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class RelElementsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.ocelet.lang.Ocelet.RelElements");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cRelPropertyDefParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cInteractionDefParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cFilterdefParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//RelElements:
		//	RelPropertyDef | InteractionDef | Filterdef;
		@Override public ParserRule getRule() { return rule; }
		
		//RelPropertyDef | InteractionDef | Filterdef
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//RelPropertyDef
		public RuleCall getRelPropertyDefParserRuleCall_0() { return cRelPropertyDefParserRuleCall_0; }
		
		//InteractionDef
		public RuleCall getInteractionDefParserRuleCall_1() { return cInteractionDefParserRuleCall_1; }
		
		//Filterdef
		public RuleCall getFilterdefParserRuleCall_2() { return cFilterdefParserRuleCall_2; }
	}
	public class RelPropertyDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.ocelet.lang.Ocelet.RelPropertyDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPropertyKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeJvmTypeReferenceParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//RelPropertyDef:
		//	'property' type=JvmTypeReference name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'property' type=JvmTypeReference name=ID
		public Group getGroup() { return cGroup; }
		
		//'property'
		public Keyword getPropertyKeyword_0() { return cPropertyKeyword_0; }
		
		//type=JvmTypeReference
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//JvmTypeReference
		public RuleCall getTypeJvmTypeReferenceParserRuleCall_1_0() { return cTypeJvmTypeReferenceParserRuleCall_1_0; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
	}
	public class InteractionDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.ocelet.lang.Ocelet.InteractionDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInteractionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cParamsAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cParamsFullJvmFormalParameterParserRuleCall_3_0_0 = (RuleCall)cParamsAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cParamsAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cParamsFullJvmFormalParameterParserRuleCall_3_1_1_0 = (RuleCall)cParamsAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cBodyAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cBodyXBlockExpressionParserRuleCall_5_0 = (RuleCall)cBodyAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cAggKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Assignment cComitexpressionsAssignment_6_2 = (Assignment)cGroup_6.eContents().get(2);
		private final RuleCall cComitexpressionsComitexprParserRuleCall_6_2_0 = (RuleCall)cComitexpressionsAssignment_6_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6_3 = (Keyword)cGroup_6.eContents().get(3);
		
		//InteractionDef:
		//	'interaction' name=ID '(' (params+=FullJvmFormalParameter (',' params+=FullJvmFormalParameter)*)? ')'
		//	body=XBlockExpression ('agg' '{' comitexpressions+=Comitexpr* '}')?;
		@Override public ParserRule getRule() { return rule; }
		
		//'interaction' name=ID '(' (params+=FullJvmFormalParameter (',' params+=FullJvmFormalParameter)*)? ')'
		//body=XBlockExpression ('agg' '{' comitexpressions+=Comitexpr* '}')?
		public Group getGroup() { return cGroup; }
		
		//'interaction'
		public Keyword getInteractionKeyword_0() { return cInteractionKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//(params+=FullJvmFormalParameter (',' params+=FullJvmFormalParameter)*)?
		public Group getGroup_3() { return cGroup_3; }
		
		//params+=FullJvmFormalParameter
		public Assignment getParamsAssignment_3_0() { return cParamsAssignment_3_0; }
		
		//FullJvmFormalParameter
		public RuleCall getParamsFullJvmFormalParameterParserRuleCall_3_0_0() { return cParamsFullJvmFormalParameterParserRuleCall_3_0_0; }
		
		//(',' params+=FullJvmFormalParameter)*
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//','
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }
		
		//params+=FullJvmFormalParameter
		public Assignment getParamsAssignment_3_1_1() { return cParamsAssignment_3_1_1; }
		
		//FullJvmFormalParameter
		public RuleCall getParamsFullJvmFormalParameterParserRuleCall_3_1_1_0() { return cParamsFullJvmFormalParameterParserRuleCall_3_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
		
		//body=XBlockExpression
		public Assignment getBodyAssignment_5() { return cBodyAssignment_5; }
		
		//XBlockExpression
		public RuleCall getBodyXBlockExpressionParserRuleCall_5_0() { return cBodyXBlockExpressionParserRuleCall_5_0; }
		
		//('agg' '{' comitexpressions+=Comitexpr* '}')?
		public Group getGroup_6() { return cGroup_6; }
		
		//'agg'
		public Keyword getAggKeyword_6_0() { return cAggKeyword_6_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_6_1() { return cLeftCurlyBracketKeyword_6_1; }
		
		//comitexpressions+=Comitexpr*
		public Assignment getComitexpressionsAssignment_6_2() { return cComitexpressionsAssignment_6_2; }
		
		//Comitexpr
		public RuleCall getComitexpressionsComitexprParserRuleCall_6_2_0() { return cComitexpressionsComitexprParserRuleCall_6_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6_3() { return cRightCurlyBracketKeyword_6_3; }
	}
	public class ComitexprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.ocelet.lang.Ocelet.Comitexpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cRolAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cRolRoleCrossReference_0_0 = (CrossReference)cRolAssignment_0.eContents().get(0);
		private final RuleCall cRolRoleIDTerminalRuleCall_0_0_1 = (RuleCall)cRolRoleCrossReference_0_0.eContents().get(1);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cPropAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPropIDTerminalRuleCall_2_0 = (RuleCall)cPropAssignment_2.eContents().get(0);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Assignment cUseprevalAssignment_3_0 = (Assignment)cAlternatives_3.eContents().get(0);
		private final Keyword cUseprevalPlusSignLessThanSignLessThanSignKeyword_3_0_0 = (Keyword)cUseprevalAssignment_3_0.eContents().get(0);
		private final Keyword cLessThanSignLessThanSignKeyword_3_1 = (Keyword)cAlternatives_3.eContents().get(1);
		private final Assignment cAgrfuncAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cAgrfuncJvmTypeReferenceParserRuleCall_4_0 = (RuleCall)cAgrfuncAssignment_4.eContents().get(0);
		
		//Comitexpr:
		//	rol=[Role] '.' prop=ID (usepreval?='+<<' | '<<') agrfunc=JvmTypeReference;
		@Override public ParserRule getRule() { return rule; }
		
		//rol=[Role] '.' prop=ID (usepreval?='+<<' | '<<') agrfunc=JvmTypeReference
		public Group getGroup() { return cGroup; }
		
		//rol=[Role]
		public Assignment getRolAssignment_0() { return cRolAssignment_0; }
		
		//[Role]
		public CrossReference getRolRoleCrossReference_0_0() { return cRolRoleCrossReference_0_0; }
		
		//ID
		public RuleCall getRolRoleIDTerminalRuleCall_0_0_1() { return cRolRoleIDTerminalRuleCall_0_0_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }
		
		//prop=ID
		public Assignment getPropAssignment_2() { return cPropAssignment_2; }
		
		//ID
		public RuleCall getPropIDTerminalRuleCall_2_0() { return cPropIDTerminalRuleCall_2_0; }
		
		//usepreval?='+<<' | '<<'
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//usepreval?='+<<'
		public Assignment getUseprevalAssignment_3_0() { return cUseprevalAssignment_3_0; }
		
		//'+<<'
		public Keyword getUseprevalPlusSignLessThanSignLessThanSignKeyword_3_0_0() { return cUseprevalPlusSignLessThanSignLessThanSignKeyword_3_0_0; }
		
		//'<<'
		public Keyword getLessThanSignLessThanSignKeyword_3_1() { return cLessThanSignLessThanSignKeyword_3_1; }
		
		//agrfunc=JvmTypeReference
		public Assignment getAgrfuncAssignment_4() { return cAgrfuncAssignment_4; }
		
		//JvmTypeReference
		public RuleCall getAgrfuncJvmTypeReferenceParserRuleCall_4_0() { return cAgrfuncJvmTypeReferenceParserRuleCall_4_0; }
	}
	public class FilterdefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.ocelet.lang.Ocelet.Filterdef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFilterKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cParamsAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cParamsFullJvmFormalParameterParserRuleCall_3_0_0 = (RuleCall)cParamsAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cParamsAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cParamsFullJvmFormalParameterParserRuleCall_3_1_1_0 = (RuleCall)cParamsAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cBodyAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cBodyXBlockExpressionParserRuleCall_5_0 = (RuleCall)cBodyAssignment_5.eContents().get(0);
		
		//Filterdef:
		//	'filter' name=ID '(' (params+=FullJvmFormalParameter (',' params+=FullJvmFormalParameter)*)? ')'
		//	body=XBlockExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//'filter' name=ID '(' (params+=FullJvmFormalParameter (',' params+=FullJvmFormalParameter)*)? ')' body=XBlockExpression
		public Group getGroup() { return cGroup; }
		
		//'filter'
		public Keyword getFilterKeyword_0() { return cFilterKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//(params+=FullJvmFormalParameter (',' params+=FullJvmFormalParameter)*)?
		public Group getGroup_3() { return cGroup_3; }
		
		//params+=FullJvmFormalParameter
		public Assignment getParamsAssignment_3_0() { return cParamsAssignment_3_0; }
		
		//FullJvmFormalParameter
		public RuleCall getParamsFullJvmFormalParameterParserRuleCall_3_0_0() { return cParamsFullJvmFormalParameterParserRuleCall_3_0_0; }
		
		//(',' params+=FullJvmFormalParameter)*
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//','
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }
		
		//params+=FullJvmFormalParameter
		public Assignment getParamsAssignment_3_1_1() { return cParamsAssignment_3_1_1; }
		
		//FullJvmFormalParameter
		public RuleCall getParamsFullJvmFormalParameterParserRuleCall_3_1_1_0() { return cParamsFullJvmFormalParameterParserRuleCall_3_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
		
		//body=XBlockExpression
		public Assignment getBodyAssignment_5() { return cBodyAssignment_5; }
		
		//XBlockExpression
		public RuleCall getBodyXBlockExpressionParserRuleCall_5_0() { return cBodyXBlockExpressionParserRuleCall_5_0; }
	}
	public class StrucdefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.ocelet.lang.Ocelet.Strucdef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStructureKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLessThanSignKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cTypeArgumentAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cTypeArgumentFqnParserRuleCall_2_1_0 = (RuleCall)cTypeArgumentAssignment_2_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cExtendsKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cSuperTypeAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cSuperTypeFqnParserRuleCall_3_1_0 = (RuleCall)cSuperTypeAssignment_3_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cStrucelnsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cStrucelnsStrucElnParserRuleCall_5_0 = (RuleCall)cStrucelnsAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//// ------ Structures ------
		//Strucdef:
		//	'structure' name=ID ('<' typeArgument=Fqn '>')? ('extends' superType=Fqn)?
		//	'{'
		//	strucelns+=StrucEln*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'structure' name=ID ('<' typeArgument=Fqn '>')? ('extends' superType=Fqn)? '{' strucelns+=StrucEln* '}'
		public Group getGroup() { return cGroup; }
		
		//'structure'
		public Keyword getStructureKeyword_0() { return cStructureKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//('<' typeArgument=Fqn '>')?
		public Group getGroup_2() { return cGroup_2; }
		
		//'<'
		public Keyword getLessThanSignKeyword_2_0() { return cLessThanSignKeyword_2_0; }
		
		//typeArgument=Fqn
		public Assignment getTypeArgumentAssignment_2_1() { return cTypeArgumentAssignment_2_1; }
		
		//Fqn
		public RuleCall getTypeArgumentFqnParserRuleCall_2_1_0() { return cTypeArgumentFqnParserRuleCall_2_1_0; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_2_2() { return cGreaterThanSignKeyword_2_2; }
		
		//('extends' superType=Fqn)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'extends'
		public Keyword getExtendsKeyword_3_0() { return cExtendsKeyword_3_0; }
		
		//superType=Fqn
		public Assignment getSuperTypeAssignment_3_1() { return cSuperTypeAssignment_3_1; }
		
		//Fqn
		public RuleCall getSuperTypeFqnParserRuleCall_3_1_0() { return cSuperTypeFqnParserRuleCall_3_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }
		
		//strucelns+=StrucEln*
		public Assignment getStrucelnsAssignment_5() { return cStrucelnsAssignment_5; }
		
		//StrucEln
		public RuleCall getStrucelnsStrucElnParserRuleCall_5_0() { return cStrucelnsStrucElnParserRuleCall_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class StrucElnElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.ocelet.lang.Ocelet.StrucEln");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cStrucVarDefParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cStrucFuncDefParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//StrucEln:
		//	StrucVarDef | StrucFuncDef;
		@Override public ParserRule getRule() { return rule; }
		
		//StrucVarDef | StrucFuncDef
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//StrucVarDef
		public RuleCall getStrucVarDefParserRuleCall_0() { return cStrucVarDefParserRuleCall_0; }
		
		//StrucFuncDef
		public RuleCall getStrucFuncDefParserRuleCall_1() { return cStrucFuncDefParserRuleCall_1; }
	}
	public class StrucVarDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.ocelet.lang.Ocelet.StrucVarDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeJvmTypeReferenceParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameValidIDParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//StrucVarDef:
		//	type=JvmTypeReference name=ValidID ';'?;
		@Override public ParserRule getRule() { return rule; }
		
		//type=JvmTypeReference name=ValidID ';'?
		public Group getGroup() { return cGroup; }
		
		//type=JvmTypeReference
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//JvmTypeReference
		public RuleCall getTypeJvmTypeReferenceParserRuleCall_0_0() { return cTypeJvmTypeReferenceParserRuleCall_0_0; }
		
		//name=ValidID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ValidID
		public RuleCall getNameValidIDParserRuleCall_1_0() { return cNameValidIDParserRuleCall_1_0; }
		
		//';'?
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}
	public class StrucFuncDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.ocelet.lang.Ocelet.StrucFuncDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFunctionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeJvmTypeReferenceParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cParamsAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cParamsFullJvmFormalParameterParserRuleCall_4_0_0 = (RuleCall)cParamsAssignment_4_0.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cGroup_4.eContents().get(1);
		private final Keyword cCommaKeyword_4_1_0 = (Keyword)cGroup_4_1.eContents().get(0);
		private final Assignment cParamsAssignment_4_1_1 = (Assignment)cGroup_4_1.eContents().get(1);
		private final RuleCall cParamsFullJvmFormalParameterParserRuleCall_4_1_1_0 = (RuleCall)cParamsAssignment_4_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cBodyAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cBodyXBlockExpressionParserRuleCall_6_0 = (RuleCall)cBodyAssignment_6.eContents().get(0);
		
		//StrucFuncDef:
		//	'function' type=JvmTypeReference? name=ID
		//	'(' (params+=FullJvmFormalParameter (',' params+=FullJvmFormalParameter)*)? ')'
		//	body=XBlockExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//'function' type=JvmTypeReference? name=ID '(' (params+=FullJvmFormalParameter (',' params+=FullJvmFormalParameter)*)?
		//')' body=XBlockExpression
		public Group getGroup() { return cGroup; }
		
		//'function'
		public Keyword getFunctionKeyword_0() { return cFunctionKeyword_0; }
		
		//type=JvmTypeReference?
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//JvmTypeReference
		public RuleCall getTypeJvmTypeReferenceParserRuleCall_1_0() { return cTypeJvmTypeReferenceParserRuleCall_1_0; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }
		
		//(params+=FullJvmFormalParameter (',' params+=FullJvmFormalParameter)*)?
		public Group getGroup_4() { return cGroup_4; }
		
		//params+=FullJvmFormalParameter
		public Assignment getParamsAssignment_4_0() { return cParamsAssignment_4_0; }
		
		//FullJvmFormalParameter
		public RuleCall getParamsFullJvmFormalParameterParserRuleCall_4_0_0() { return cParamsFullJvmFormalParameterParserRuleCall_4_0_0; }
		
		//(',' params+=FullJvmFormalParameter)*
		public Group getGroup_4_1() { return cGroup_4_1; }
		
		//','
		public Keyword getCommaKeyword_4_1_0() { return cCommaKeyword_4_1_0; }
		
		//params+=FullJvmFormalParameter
		public Assignment getParamsAssignment_4_1_1() { return cParamsAssignment_4_1_1; }
		
		//FullJvmFormalParameter
		public RuleCall getParamsFullJvmFormalParameterParserRuleCall_4_1_1_0() { return cParamsFullJvmFormalParameterParserRuleCall_4_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
		
		//body=XBlockExpression
		public Assignment getBodyAssignment_6() { return cBodyAssignment_6; }
		
		//XBlockExpression
		public RuleCall getBodyXBlockExpressionParserRuleCall_6_0() { return cBodyXBlockExpressionParserRuleCall_6_0; }
	}
	public class DatafacerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.ocelet.lang.Ocelet.Datafacer");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDatafacerKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Keyword cStoreKeyword_3_0 = (Keyword)cAlternatives_3.eContents().get(0);
		private final Keyword cDataKeyword_3_1 = (Keyword)cAlternatives_3.eContents().get(1);
		private final Assignment cStoretypeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cStoretypeValidIDParserRuleCall_4_0 = (RuleCall)cStoretypeAssignment_4.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Assignment cArgumentsAssignment_6_0 = (Assignment)cGroup_6.eContents().get(0);
		private final RuleCall cArgumentsXExpressionParserRuleCall_6_0_0 = (RuleCall)cArgumentsAssignment_6_0.eContents().get(0);
		private final Group cGroup_6_1 = (Group)cGroup_6.eContents().get(1);
		private final Keyword cCommaKeyword_6_1_0 = (Keyword)cGroup_6_1.eContents().get(0);
		private final Assignment cArgumentsAssignment_6_1_1 = (Assignment)cGroup_6_1.eContents().get(1);
		private final RuleCall cArgumentsXExpressionParserRuleCall_6_1_1_0 = (RuleCall)cArgumentsAssignment_6_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cMatchboxAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cMatchboxMatchParserRuleCall_8_0 = (RuleCall)cMatchboxAssignment_8.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//// ------ Datafacer ------
		//Datafacer:
		//	'datafacer' name=ID '{' ('store' | 'data') storetype=ValidID
		//	'(' (arguments+=XExpression (',' arguments+=XExpression)*)? ')'
		//	matchbox+=Match*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'datafacer' name=ID '{' ('store' | 'data') storetype=ValidID '(' (arguments+=XExpression (',' arguments+=XExpression)*)?
		//')' matchbox+=Match* '}'
		public Group getGroup() { return cGroup; }
		
		//'datafacer'
		public Keyword getDatafacerKeyword_0() { return cDatafacerKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//'store' | 'data'
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//'store'
		public Keyword getStoreKeyword_3_0() { return cStoreKeyword_3_0; }
		
		//'data'
		public Keyword getDataKeyword_3_1() { return cDataKeyword_3_1; }
		
		//storetype=ValidID
		public Assignment getStoretypeAssignment_4() { return cStoretypeAssignment_4; }
		
		//ValidID
		public RuleCall getStoretypeValidIDParserRuleCall_4_0() { return cStoretypeValidIDParserRuleCall_4_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_5() { return cLeftParenthesisKeyword_5; }
		
		//(arguments+=XExpression (',' arguments+=XExpression)*)?
		public Group getGroup_6() { return cGroup_6; }
		
		//arguments+=XExpression
		public Assignment getArgumentsAssignment_6_0() { return cArgumentsAssignment_6_0; }
		
		//XExpression
		public RuleCall getArgumentsXExpressionParserRuleCall_6_0_0() { return cArgumentsXExpressionParserRuleCall_6_0_0; }
		
		//(',' arguments+=XExpression)*
		public Group getGroup_6_1() { return cGroup_6_1; }
		
		//','
		public Keyword getCommaKeyword_6_1_0() { return cCommaKeyword_6_1_0; }
		
		//arguments+=XExpression
		public Assignment getArgumentsAssignment_6_1_1() { return cArgumentsAssignment_6_1_1; }
		
		//XExpression
		public RuleCall getArgumentsXExpressionParserRuleCall_6_1_1_0() { return cArgumentsXExpressionParserRuleCall_6_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }
		
		//matchbox+=Match*
		public Assignment getMatchboxAssignment_8() { return cMatchboxAssignment_8; }
		
		//Match
		public RuleCall getMatchboxMatchParserRuleCall_8_0() { return cMatchboxMatchParserRuleCall_8_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_9() { return cRightCurlyBracketKeyword_9; }
	}
	public class MatchElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.ocelet.lang.Ocelet.Match");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMatchKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cMtypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cMtypeMatchtypeCrossReference_1_0 = (CrossReference)cMtypeAssignment_1.eContents().get(0);
		private final RuleCall cMtypeMatchtypeIDTerminalRuleCall_1_0_1 = (RuleCall)cMtypeMatchtypeCrossReference_1_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cMatchpropsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cMatchpropsMdefParserRuleCall_3_0 = (RuleCall)cMatchpropsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Match:
		//	'match' mtype=[Matchtype] '{'
		//	matchprops+=Mdef*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'match' mtype=[Matchtype] '{' matchprops+=Mdef* '}'
		public Group getGroup() { return cGroup; }
		
		//'match'
		public Keyword getMatchKeyword_0() { return cMatchKeyword_0; }
		
		//mtype=[Matchtype]
		public Assignment getMtypeAssignment_1() { return cMtypeAssignment_1; }
		
		//[Matchtype]
		public CrossReference getMtypeMatchtypeCrossReference_1_0() { return cMtypeMatchtypeCrossReference_1_0; }
		
		//ID
		public RuleCall getMtypeMatchtypeIDTerminalRuleCall_1_0_1() { return cMtypeMatchtypeIDTerminalRuleCall_1_0_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//matchprops+=Mdef*
		public Assignment getMatchpropsAssignment_3() { return cMatchpropsAssignment_3; }
		
		//Mdef
		public RuleCall getMatchpropsMdefParserRuleCall_3_0() { return cMatchpropsMdefParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class MatchtypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.ocelet.lang.Ocelet.Matchtype");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cEntityParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cStrucdefParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Matchtype:
		//	Entity | Strucdef;
		@Override public ParserRule getRule() { return rule; }
		
		//Entity | Strucdef
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Entity
		public RuleCall getEntityParserRuleCall_0() { return cEntityParserRuleCall_0; }
		
		//Strucdef
		public RuleCall getStrucdefParserRuleCall_1() { return cStrucdefParserRuleCall_1; }
	}
	public class MdefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.ocelet.lang.Ocelet.Mdef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPropAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cPropIDTerminalRuleCall_0_0 = (RuleCall)cPropAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cColnameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cColnameSTRINGTerminalRuleCall_2_0 = (RuleCall)cColnameAssignment_2.eContents().get(0);
		
		//Mdef:
		//	prop=ID ':' colname=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//prop=ID ':' colname=STRING
		public Group getGroup() { return cGroup; }
		
		//prop=ID
		public Assignment getPropAssignment_0() { return cPropAssignment_0; }
		
		//ID
		public RuleCall getPropIDTerminalRuleCall_0_0() { return cPropIDTerminalRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//colname=STRING
		public Assignment getColnameAssignment_2() { return cColnameAssignment_2; }
		
		//STRING
		public RuleCall getColnameSTRINGTerminalRuleCall_2_0() { return cColnameSTRINGTerminalRuleCall_2_0; }
	}
	public class AgregdefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.ocelet.lang.Ocelet.Agregdef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAggregKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeJvmTypeReferenceParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Assignment cBodyAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cBodyXBlockExpressionParserRuleCall_3_0 = (RuleCall)cBodyAssignment_3.eContents().get(0);
		
		////------ Agregation functions ------
		//Agregdef:
		//	'aggreg' type=JvmTypeReference name=ID
		//	body=XBlockExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//'aggreg' type=JvmTypeReference name=ID body=XBlockExpression
		public Group getGroup() { return cGroup; }
		
		//'aggreg'
		public Keyword getAggregKeyword_0() { return cAggregKeyword_0; }
		
		//type=JvmTypeReference
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//JvmTypeReference
		public RuleCall getTypeJvmTypeReferenceParserRuleCall_1_0() { return cTypeJvmTypeReferenceParserRuleCall_1_0; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//body=XBlockExpression
		public Assignment getBodyAssignment_3() { return cBodyAssignment_3; }
		
		//XBlockExpression
		public RuleCall getBodyXBlockExpressionParserRuleCall_3_0() { return cBodyXBlockExpressionParserRuleCall_3_0; }
	}
	public class ScenarioElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.ocelet.lang.Ocelet.Scenario");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cScenarioKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeJvmTypeReferenceParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Assignment cParamsAssignment_3_1_0 = (Assignment)cGroup_3_1.eContents().get(0);
		private final RuleCall cParamsFullJvmFormalParameterParserRuleCall_3_1_0_0 = (RuleCall)cParamsAssignment_3_1_0.eContents().get(0);
		private final Group cGroup_3_1_1 = (Group)cGroup_3_1.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_1_0 = (Keyword)cGroup_3_1_1.eContents().get(0);
		private final Assignment cParamsAssignment_3_1_1_1 = (Assignment)cGroup_3_1_1.eContents().get(1);
		private final RuleCall cParamsFullJvmFormalParameterParserRuleCall_3_1_1_1_0 = (RuleCall)cParamsAssignment_3_1_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Assignment cBodyAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cBodyXBlockExpressionParserRuleCall_4_0 = (RuleCall)cBodyAssignment_4.eContents().get(0);
		
		////------ Scenario ------
		//Scenario:
		//	'scenario' type=JvmTypeReference? name=ID ('(' (params+=FullJvmFormalParameter (',' params+=FullJvmFormalParameter)*)?
		//	')')?
		//	body=XBlockExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//'scenario' type=JvmTypeReference? name=ID ('(' (params+=FullJvmFormalParameter (',' params+=FullJvmFormalParameter)*)?
		//')')? body=XBlockExpression
		public Group getGroup() { return cGroup; }
		
		//'scenario'
		public Keyword getScenarioKeyword_0() { return cScenarioKeyword_0; }
		
		//type=JvmTypeReference?
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//JvmTypeReference
		public RuleCall getTypeJvmTypeReferenceParserRuleCall_1_0() { return cTypeJvmTypeReferenceParserRuleCall_1_0; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//('(' (params+=FullJvmFormalParameter (',' params+=FullJvmFormalParameter)*)? ')')?
		public Group getGroup_3() { return cGroup_3; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3_0() { return cLeftParenthesisKeyword_3_0; }
		
		//(params+=FullJvmFormalParameter (',' params+=FullJvmFormalParameter)*)?
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//params+=FullJvmFormalParameter
		public Assignment getParamsAssignment_3_1_0() { return cParamsAssignment_3_1_0; }
		
		//FullJvmFormalParameter
		public RuleCall getParamsFullJvmFormalParameterParserRuleCall_3_1_0_0() { return cParamsFullJvmFormalParameterParserRuleCall_3_1_0_0; }
		
		//(',' params+=FullJvmFormalParameter)*
		public Group getGroup_3_1_1() { return cGroup_3_1_1; }
		
		//','
		public Keyword getCommaKeyword_3_1_1_0() { return cCommaKeyword_3_1_1_0; }
		
		//params+=FullJvmFormalParameter
		public Assignment getParamsAssignment_3_1_1_1() { return cParamsAssignment_3_1_1_1; }
		
		//FullJvmFormalParameter
		public RuleCall getParamsFullJvmFormalParameterParserRuleCall_3_1_1_1_0() { return cParamsFullJvmFormalParameterParserRuleCall_3_1_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3_2() { return cRightParenthesisKeyword_3_2; }
		
		//body=XBlockExpression
		public Assignment getBodyAssignment_4() { return cBodyAssignment_4; }
		
		//XBlockExpression
		public RuleCall getBodyXBlockExpressionParserRuleCall_4_0() { return cBodyXBlockExpressionParserRuleCall_4_0; }
	}
	public class XVariableDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.ocelet.lang.Ocelet.XVariableDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cXVariableDeclarationAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cWriteableAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final Alternatives cWriteableAlternatives_1_0_0 = (Alternatives)cWriteableAssignment_1_0.eContents().get(0);
		private final Keyword cWriteableCreateKeyword_1_0_0_0 = (Keyword)cWriteableAlternatives_1_0_0.eContents().get(0);
		private final Keyword cWriteableLetKeyword_1_0_0_1 = (Keyword)cWriteableAlternatives_1_0_0.eContents().get(1);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cAlternatives_1.eContents().get(1);
		private final Keyword cFixKeyword_1_1_0 = (Keyword)cAlternatives_1_1.eContents().get(0);
		private final Keyword cConstKeyword_1_1_1 = (Keyword)cAlternatives_1_1.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cAlternatives_2.eContents().get(0);
		private final Group cGroup_2_0_0 = (Group)cGroup_2_0.eContents().get(0);
		private final Assignment cTypeAssignment_2_0_0_0 = (Assignment)cGroup_2_0_0.eContents().get(0);
		private final RuleCall cTypeJvmTypeReferenceParserRuleCall_2_0_0_0_0 = (RuleCall)cTypeAssignment_2_0_0_0.eContents().get(0);
		private final Assignment cNameAssignment_2_0_0_1 = (Assignment)cGroup_2_0_0.eContents().get(1);
		private final RuleCall cNameValidIDParserRuleCall_2_0_0_1_0 = (RuleCall)cNameAssignment_2_0_0_1.eContents().get(0);
		private final Assignment cNameAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cNameValidIDParserRuleCall_2_1_0 = (RuleCall)cNameAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cEqualsSignKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cRightAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cRightXExpressionParserRuleCall_3_1_0 = (RuleCall)cRightAssignment_3_1.eContents().get(0);
		
		////------ XBase customization ------
		//XVariableDeclaration XExpression:
		//	{XVariableDeclaration} (writeable?=('create' | 'let') | ('fix' | 'const')) (=> (type=JvmTypeReference name=ValidID) |
		//	name=ValidID) ('=' right=XExpression)?;
		@Override public ParserRule getRule() { return rule; }
		
		//{XVariableDeclaration} (writeable?=('create' | 'let') | ('fix' | 'const')) (=> (type=JvmTypeReference name=ValidID) |
		//name=ValidID) ('=' right=XExpression)?
		public Group getGroup() { return cGroup; }
		
		//{XVariableDeclaration}
		public Action getXVariableDeclarationAction_0() { return cXVariableDeclarationAction_0; }
		
		//writeable?=('create' | 'let') | ('fix' | 'const')
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//writeable?=('create' | 'let')
		public Assignment getWriteableAssignment_1_0() { return cWriteableAssignment_1_0; }
		
		//('create' | 'let')
		public Alternatives getWriteableAlternatives_1_0_0() { return cWriteableAlternatives_1_0_0; }
		
		//'create'
		public Keyword getWriteableCreateKeyword_1_0_0_0() { return cWriteableCreateKeyword_1_0_0_0; }
		
		//'let'
		public Keyword getWriteableLetKeyword_1_0_0_1() { return cWriteableLetKeyword_1_0_0_1; }
		
		//('fix' | 'const')
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }
		
		//'fix'
		public Keyword getFixKeyword_1_1_0() { return cFixKeyword_1_1_0; }
		
		//'const'
		public Keyword getConstKeyword_1_1_1() { return cConstKeyword_1_1_1; }
		
		//=> (type=JvmTypeReference name=ValidID) | name=ValidID
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//=> (type=JvmTypeReference name=ValidID)
		public Group getGroup_2_0() { return cGroup_2_0; }
		
		//type=JvmTypeReference name=ValidID
		public Group getGroup_2_0_0() { return cGroup_2_0_0; }
		
		//type=JvmTypeReference
		public Assignment getTypeAssignment_2_0_0_0() { return cTypeAssignment_2_0_0_0; }
		
		//JvmTypeReference
		public RuleCall getTypeJvmTypeReferenceParserRuleCall_2_0_0_0_0() { return cTypeJvmTypeReferenceParserRuleCall_2_0_0_0_0; }
		
		//name=ValidID
		public Assignment getNameAssignment_2_0_0_1() { return cNameAssignment_2_0_0_1; }
		
		//ValidID
		public RuleCall getNameValidIDParserRuleCall_2_0_0_1_0() { return cNameValidIDParserRuleCall_2_0_0_1_0; }
		
		//name=ValidID
		public Assignment getNameAssignment_2_1() { return cNameAssignment_2_1; }
		
		//ValidID
		public RuleCall getNameValidIDParserRuleCall_2_1_0() { return cNameValidIDParserRuleCall_2_1_0; }
		
		//('=' right=XExpression)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'='
		public Keyword getEqualsSignKeyword_3_0() { return cEqualsSignKeyword_3_0; }
		
		//right=XExpression
		public Assignment getRightAssignment_3_1() { return cRightAssignment_3_1; }
		
		//XExpression
		public RuleCall getRightXExpressionParserRuleCall_3_1_0() { return cRightXExpressionParserRuleCall_3_1_0; }
	}
	public class XMemberFeatureCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.ocelet.lang.Ocelet.XMemberFeatureCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cXPrimaryExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Group cGroup_1_0_0_0 = (Group)cGroup_1_0_0.eContents().get(0);
		private final Action cXAssignmentAssignableAction_1_0_0_0_0 = (Action)cGroup_1_0_0_0.eContents().get(0);
		private final Alternatives cAlternatives_1_0_0_0_1 = (Alternatives)cGroup_1_0_0_0.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0_0_0_1_0 = (Keyword)cAlternatives_1_0_0_0_1.eContents().get(0);
		private final Assignment cExplicitStaticAssignment_1_0_0_0_1_1 = (Assignment)cAlternatives_1_0_0_0_1.eContents().get(1);
		private final Keyword cExplicitStaticVerticalLineKeyword_1_0_0_0_1_1_0 = (Keyword)cExplicitStaticAssignment_1_0_0_0_1_1.eContents().get(0);
		private final Assignment cFeatureAssignment_1_0_0_0_2 = (Assignment)cGroup_1_0_0_0.eContents().get(2);
		private final CrossReference cFeatureJvmIdentifiableElementCrossReference_1_0_0_0_2_0 = (CrossReference)cFeatureAssignment_1_0_0_0_2.eContents().get(0);
		private final RuleCall cFeatureJvmIdentifiableElementFeatureCallIDParserRuleCall_1_0_0_0_2_0_1 = (RuleCall)cFeatureJvmIdentifiableElementCrossReference_1_0_0_0_2_0.eContents().get(1);
		private final RuleCall cOpSingleAssignParserRuleCall_1_0_0_0_3 = (RuleCall)cGroup_1_0_0_0.eContents().get(3);
		private final Assignment cValueAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cValueXAssignmentParserRuleCall_1_0_1_0 = (RuleCall)cValueAssignment_1_0_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Group cGroup_1_1_0 = (Group)cGroup_1_1.eContents().get(0);
		private final Group cGroup_1_1_0_0 = (Group)cGroup_1_1_0.eContents().get(0);
		private final Action cXMemberFeatureCallMemberCallTargetAction_1_1_0_0_0 = (Action)cGroup_1_1_0_0.eContents().get(0);
		private final Alternatives cAlternatives_1_1_0_0_1 = (Alternatives)cGroup_1_1_0_0.eContents().get(1);
		private final Keyword cFullStopKeyword_1_1_0_0_1_0 = (Keyword)cAlternatives_1_1_0_0_1.eContents().get(0);
		private final Assignment cNullSafeAssignment_1_1_0_0_1_1 = (Assignment)cAlternatives_1_1_0_0_1.eContents().get(1);
		private final Keyword cNullSafeQuestionMarkFullStopKeyword_1_1_0_0_1_1_0 = (Keyword)cNullSafeAssignment_1_1_0_0_1_1.eContents().get(0);
		private final Assignment cExplicitStaticAssignment_1_1_0_0_1_2 = (Assignment)cAlternatives_1_1_0_0_1.eContents().get(2);
		private final Keyword cExplicitStaticVerticalLineKeyword_1_1_0_0_1_2_0 = (Keyword)cExplicitStaticAssignment_1_1_0_0_1_2.eContents().get(0);
		private final Group cGroup_1_1_1 = (Group)cGroup_1_1.eContents().get(1);
		private final Keyword cLessThanSignKeyword_1_1_1_0 = (Keyword)cGroup_1_1_1.eContents().get(0);
		private final Assignment cTypeArgumentsAssignment_1_1_1_1 = (Assignment)cGroup_1_1_1.eContents().get(1);
		private final RuleCall cTypeArgumentsJvmArgumentTypeReferenceParserRuleCall_1_1_1_1_0 = (RuleCall)cTypeArgumentsAssignment_1_1_1_1.eContents().get(0);
		private final Group cGroup_1_1_1_2 = (Group)cGroup_1_1_1.eContents().get(2);
		private final Keyword cCommaKeyword_1_1_1_2_0 = (Keyword)cGroup_1_1_1_2.eContents().get(0);
		private final Assignment cTypeArgumentsAssignment_1_1_1_2_1 = (Assignment)cGroup_1_1_1_2.eContents().get(1);
		private final RuleCall cTypeArgumentsJvmArgumentTypeReferenceParserRuleCall_1_1_1_2_1_0 = (RuleCall)cTypeArgumentsAssignment_1_1_1_2_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_1_1_1_3 = (Keyword)cGroup_1_1_1.eContents().get(3);
		private final Assignment cFeatureAssignment_1_1_2 = (Assignment)cGroup_1_1.eContents().get(2);
		private final CrossReference cFeatureJvmIdentifiableElementCrossReference_1_1_2_0 = (CrossReference)cFeatureAssignment_1_1_2.eContents().get(0);
		private final RuleCall cFeatureJvmIdentifiableElementIdOrSuperParserRuleCall_1_1_2_0_1 = (RuleCall)cFeatureJvmIdentifiableElementCrossReference_1_1_2_0.eContents().get(1);
		private final Group cGroup_1_1_3 = (Group)cGroup_1_1.eContents().get(3);
		private final Assignment cExplicitOperationCallAssignment_1_1_3_0 = (Assignment)cGroup_1_1_3.eContents().get(0);
		private final Keyword cExplicitOperationCallLeftParenthesisKeyword_1_1_3_0_0 = (Keyword)cExplicitOperationCallAssignment_1_1_3_0.eContents().get(0);
		private final Alternatives cAlternatives_1_1_3_1 = (Alternatives)cGroup_1_1_3.eContents().get(1);
		private final Assignment cMemberCallArgumentsAssignment_1_1_3_1_0 = (Assignment)cAlternatives_1_1_3_1.eContents().get(0);
		private final RuleCall cMemberCallArgumentsXShortClosureParserRuleCall_1_1_3_1_0_0 = (RuleCall)cMemberCallArgumentsAssignment_1_1_3_1_0.eContents().get(0);
		private final Group cGroup_1_1_3_1_1 = (Group)cAlternatives_1_1_3_1.eContents().get(1);
		private final Assignment cMemberCallArgumentsAssignment_1_1_3_1_1_0 = (Assignment)cGroup_1_1_3_1_1.eContents().get(0);
		private final RuleCall cMemberCallArgumentsXExpressionParserRuleCall_1_1_3_1_1_0_0 = (RuleCall)cMemberCallArgumentsAssignment_1_1_3_1_1_0.eContents().get(0);
		private final Group cGroup_1_1_3_1_1_1 = (Group)cGroup_1_1_3_1_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_1_3_1_1_1_0 = (Keyword)cGroup_1_1_3_1_1_1.eContents().get(0);
		private final Assignment cMemberCallArgumentsAssignment_1_1_3_1_1_1_1 = (Assignment)cGroup_1_1_3_1_1_1.eContents().get(1);
		private final RuleCall cMemberCallArgumentsXExpressionParserRuleCall_1_1_3_1_1_1_1_0 = (RuleCall)cMemberCallArgumentsAssignment_1_1_3_1_1_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_1_3_2 = (Keyword)cGroup_1_1_3.eContents().get(2);
		private final Assignment cMemberCallArgumentsAssignment_1_1_4 = (Assignment)cGroup_1_1.eContents().get(4);
		private final RuleCall cMemberCallArgumentsXClosureParserRuleCall_1_1_4_0 = (RuleCall)cMemberCallArgumentsAssignment_1_1_4.eContents().get(0);
		
		//XMemberFeatureCall XExpression:
		//	XPrimaryExpression (=> ({XAssignment.assignable=current} ('.' | explicitStatic?="|")
		//	feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign) value=XAssignment
		//	| => ({XMemberFeatureCall.memberCallTarget=current} ("." | nullSafe?="?." | explicitStatic?="|")) ('<'
		//	typeArguments+=JvmArgumentTypeReference (',' typeArguments+=JvmArgumentTypeReference)* '>')?
		//	feature=[types::JvmIdentifiableElement|IdOrSuper] (=> explicitOperationCall?='(' (memberCallArguments+=XShortClosure
		//	| memberCallArguments+=XExpression (',' memberCallArguments+=XExpression)*)?
		//	')')?
		//	memberCallArguments+=XClosure?)*;
		@Override public ParserRule getRule() { return rule; }
		
		//XPrimaryExpression (=> ({XAssignment.assignable=current} ('.' | explicitStatic?="|")
		//feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign) value=XAssignment | =>
		//({XMemberFeatureCall.memberCallTarget=current} ("." | nullSafe?="?." | explicitStatic?="|")) ('<'
		//typeArguments+=JvmArgumentTypeReference (',' typeArguments+=JvmArgumentTypeReference)* '>')?
		//feature=[types::JvmIdentifiableElement|IdOrSuper] (=> explicitOperationCall?='(' (memberCallArguments+=XShortClosure |
		//memberCallArguments+=XExpression (',' memberCallArguments+=XExpression)*)? ')')? memberCallArguments+=XClosure?)*
		public Group getGroup() { return cGroup; }
		
		//XPrimaryExpression
		public RuleCall getXPrimaryExpressionParserRuleCall_0() { return cXPrimaryExpressionParserRuleCall_0; }
		
		//(=> ({XAssignment.assignable=current} ('.' | explicitStatic?="|") feature=[types::JvmIdentifiableElement|FeatureCallID]
		//OpSingleAssign) value=XAssignment | => ({XMemberFeatureCall.memberCallTarget=current} ("." | nullSafe?="?." |
		//explicitStatic?="|")) ('<' typeArguments+=JvmArgumentTypeReference (',' typeArguments+=JvmArgumentTypeReference)* '>')?
		//feature=[types::JvmIdentifiableElement|IdOrSuper] (=> explicitOperationCall?='(' (memberCallArguments+=XShortClosure |
		//memberCallArguments+=XExpression (',' memberCallArguments+=XExpression)*)? ')')? memberCallArguments+=XClosure?)*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//=> ({XAssignment.assignable=current} ('.' | explicitStatic?="|") feature=[types::JvmIdentifiableElement|FeatureCallID]
		//OpSingleAssign) value=XAssignment
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//=> ({XAssignment.assignable=current} ('.' | explicitStatic?="|") feature=[types::JvmIdentifiableElement|FeatureCallID]
		//OpSingleAssign)
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }
		
		//{XAssignment.assignable=current} ('.' | explicitStatic?="|") feature=[types::JvmIdentifiableElement|FeatureCallID]
		//OpSingleAssign
		public Group getGroup_1_0_0_0() { return cGroup_1_0_0_0; }
		
		//{XAssignment.assignable=current}
		public Action getXAssignmentAssignableAction_1_0_0_0_0() { return cXAssignmentAssignableAction_1_0_0_0_0; }
		
		//'.' | explicitStatic?="|"
		public Alternatives getAlternatives_1_0_0_0_1() { return cAlternatives_1_0_0_0_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0_0_0_1_0() { return cFullStopKeyword_1_0_0_0_1_0; }
		
		//explicitStatic?="|"
		public Assignment getExplicitStaticAssignment_1_0_0_0_1_1() { return cExplicitStaticAssignment_1_0_0_0_1_1; }
		
		//"|"
		public Keyword getExplicitStaticVerticalLineKeyword_1_0_0_0_1_1_0() { return cExplicitStaticVerticalLineKeyword_1_0_0_0_1_1_0; }
		
		//feature=[types::JvmIdentifiableElement|FeatureCallID]
		public Assignment getFeatureAssignment_1_0_0_0_2() { return cFeatureAssignment_1_0_0_0_2; }
		
		//[types::JvmIdentifiableElement|FeatureCallID]
		public CrossReference getFeatureJvmIdentifiableElementCrossReference_1_0_0_0_2_0() { return cFeatureJvmIdentifiableElementCrossReference_1_0_0_0_2_0; }
		
		//FeatureCallID
		public RuleCall getFeatureJvmIdentifiableElementFeatureCallIDParserRuleCall_1_0_0_0_2_0_1() { return cFeatureJvmIdentifiableElementFeatureCallIDParserRuleCall_1_0_0_0_2_0_1; }
		
		//OpSingleAssign
		public RuleCall getOpSingleAssignParserRuleCall_1_0_0_0_3() { return cOpSingleAssignParserRuleCall_1_0_0_0_3; }
		
		//value=XAssignment
		public Assignment getValueAssignment_1_0_1() { return cValueAssignment_1_0_1; }
		
		//XAssignment
		public RuleCall getValueXAssignmentParserRuleCall_1_0_1_0() { return cValueXAssignmentParserRuleCall_1_0_1_0; }
		
		//=> ({XMemberFeatureCall.memberCallTarget=current} ("." | nullSafe?="?." | explicitStatic?="|")) ('<'
		//typeArguments+=JvmArgumentTypeReference (',' typeArguments+=JvmArgumentTypeReference)* '>')?
		//feature=[types::JvmIdentifiableElement|IdOrSuper] (=> explicitOperationCall?='(' (memberCallArguments+=XShortClosure |
		//memberCallArguments+=XExpression (',' memberCallArguments+=XExpression)*)? ')')? memberCallArguments+=XClosure?
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//=> ({XMemberFeatureCall.memberCallTarget=current} ("." | nullSafe?="?." | explicitStatic?="|"))
		public Group getGroup_1_1_0() { return cGroup_1_1_0; }
		
		//{XMemberFeatureCall.memberCallTarget=current} ("." | nullSafe?="?." | explicitStatic?="|")
		public Group getGroup_1_1_0_0() { return cGroup_1_1_0_0; }
		
		//{XMemberFeatureCall.memberCallTarget=current}
		public Action getXMemberFeatureCallMemberCallTargetAction_1_1_0_0_0() { return cXMemberFeatureCallMemberCallTargetAction_1_1_0_0_0; }
		
		//"." | nullSafe?="?." | explicitStatic?="|"
		public Alternatives getAlternatives_1_1_0_0_1() { return cAlternatives_1_1_0_0_1; }
		
		//"."
		public Keyword getFullStopKeyword_1_1_0_0_1_0() { return cFullStopKeyword_1_1_0_0_1_0; }
		
		//nullSafe?="?."
		public Assignment getNullSafeAssignment_1_1_0_0_1_1() { return cNullSafeAssignment_1_1_0_0_1_1; }
		
		//"?."
		public Keyword getNullSafeQuestionMarkFullStopKeyword_1_1_0_0_1_1_0() { return cNullSafeQuestionMarkFullStopKeyword_1_1_0_0_1_1_0; }
		
		//explicitStatic?="|"
		public Assignment getExplicitStaticAssignment_1_1_0_0_1_2() { return cExplicitStaticAssignment_1_1_0_0_1_2; }
		
		//"|"
		public Keyword getExplicitStaticVerticalLineKeyword_1_1_0_0_1_2_0() { return cExplicitStaticVerticalLineKeyword_1_1_0_0_1_2_0; }
		
		//('<' typeArguments+=JvmArgumentTypeReference (',' typeArguments+=JvmArgumentTypeReference)* '>')?
		public Group getGroup_1_1_1() { return cGroup_1_1_1; }
		
		//'<'
		public Keyword getLessThanSignKeyword_1_1_1_0() { return cLessThanSignKeyword_1_1_1_0; }
		
		//typeArguments+=JvmArgumentTypeReference
		public Assignment getTypeArgumentsAssignment_1_1_1_1() { return cTypeArgumentsAssignment_1_1_1_1; }
		
		//JvmArgumentTypeReference
		public RuleCall getTypeArgumentsJvmArgumentTypeReferenceParserRuleCall_1_1_1_1_0() { return cTypeArgumentsJvmArgumentTypeReferenceParserRuleCall_1_1_1_1_0; }
		
		//(',' typeArguments+=JvmArgumentTypeReference)*
		public Group getGroup_1_1_1_2() { return cGroup_1_1_1_2; }
		
		//','
		public Keyword getCommaKeyword_1_1_1_2_0() { return cCommaKeyword_1_1_1_2_0; }
		
		//typeArguments+=JvmArgumentTypeReference
		public Assignment getTypeArgumentsAssignment_1_1_1_2_1() { return cTypeArgumentsAssignment_1_1_1_2_1; }
		
		//JvmArgumentTypeReference
		public RuleCall getTypeArgumentsJvmArgumentTypeReferenceParserRuleCall_1_1_1_2_1_0() { return cTypeArgumentsJvmArgumentTypeReferenceParserRuleCall_1_1_1_2_1_0; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_1_1_1_3() { return cGreaterThanSignKeyword_1_1_1_3; }
		
		//feature=[types::JvmIdentifiableElement|IdOrSuper]
		public Assignment getFeatureAssignment_1_1_2() { return cFeatureAssignment_1_1_2; }
		
		//[types::JvmIdentifiableElement|IdOrSuper]
		public CrossReference getFeatureJvmIdentifiableElementCrossReference_1_1_2_0() { return cFeatureJvmIdentifiableElementCrossReference_1_1_2_0; }
		
		//IdOrSuper
		public RuleCall getFeatureJvmIdentifiableElementIdOrSuperParserRuleCall_1_1_2_0_1() { return cFeatureJvmIdentifiableElementIdOrSuperParserRuleCall_1_1_2_0_1; }
		
		//(=> explicitOperationCall?='(' (memberCallArguments+=XShortClosure | memberCallArguments+=XExpression (','
		//memberCallArguments+=XExpression)*)? ')')?
		public Group getGroup_1_1_3() { return cGroup_1_1_3; }
		
		//=> explicitOperationCall?='('
		public Assignment getExplicitOperationCallAssignment_1_1_3_0() { return cExplicitOperationCallAssignment_1_1_3_0; }
		
		//'('
		public Keyword getExplicitOperationCallLeftParenthesisKeyword_1_1_3_0_0() { return cExplicitOperationCallLeftParenthesisKeyword_1_1_3_0_0; }
		
		//(memberCallArguments+=XShortClosure | memberCallArguments+=XExpression (',' memberCallArguments+=XExpression)*)?
		public Alternatives getAlternatives_1_1_3_1() { return cAlternatives_1_1_3_1; }
		
		//memberCallArguments+=XShortClosure
		public Assignment getMemberCallArgumentsAssignment_1_1_3_1_0() { return cMemberCallArgumentsAssignment_1_1_3_1_0; }
		
		//XShortClosure
		public RuleCall getMemberCallArgumentsXShortClosureParserRuleCall_1_1_3_1_0_0() { return cMemberCallArgumentsXShortClosureParserRuleCall_1_1_3_1_0_0; }
		
		//memberCallArguments+=XExpression (',' memberCallArguments+=XExpression)*
		public Group getGroup_1_1_3_1_1() { return cGroup_1_1_3_1_1; }
		
		//memberCallArguments+=XExpression
		public Assignment getMemberCallArgumentsAssignment_1_1_3_1_1_0() { return cMemberCallArgumentsAssignment_1_1_3_1_1_0; }
		
		//XExpression
		public RuleCall getMemberCallArgumentsXExpressionParserRuleCall_1_1_3_1_1_0_0() { return cMemberCallArgumentsXExpressionParserRuleCall_1_1_3_1_1_0_0; }
		
		//(',' memberCallArguments+=XExpression)*
		public Group getGroup_1_1_3_1_1_1() { return cGroup_1_1_3_1_1_1; }
		
		//','
		public Keyword getCommaKeyword_1_1_3_1_1_1_0() { return cCommaKeyword_1_1_3_1_1_1_0; }
		
		//memberCallArguments+=XExpression
		public Assignment getMemberCallArgumentsAssignment_1_1_3_1_1_1_1() { return cMemberCallArgumentsAssignment_1_1_3_1_1_1_1; }
		
		//XExpression
		public RuleCall getMemberCallArgumentsXExpressionParserRuleCall_1_1_3_1_1_1_1_0() { return cMemberCallArgumentsXExpressionParserRuleCall_1_1_3_1_1_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_1_3_2() { return cRightParenthesisKeyword_1_1_3_2; }
		
		//memberCallArguments+=XClosure?
		public Assignment getMemberCallArgumentsAssignment_1_1_4() { return cMemberCallArgumentsAssignment_1_1_4; }
		
		//XClosure
		public RuleCall getMemberCallArgumentsXClosureParserRuleCall_1_1_4_0() { return cMemberCallArgumentsXClosureParserRuleCall_1_1_4_0; }
	}
	public class StaticQualifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.ocelet.lang.Ocelet.StaticQualifier");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cValidIDParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cVerticalLineKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//StaticQualifier:
		//	(ValidID '|')+;
		@Override public ParserRule getRule() { return rule; }
		
		//(ValidID '|')+
		public Group getGroup() { return cGroup; }
		
		//ValidID
		public RuleCall getValidIDParserRuleCall_0() { return cValidIDParserRuleCall_0; }
		
		//'|'
		public Keyword getVerticalLineKeyword_1() { return cVerticalLineKeyword_1; }
	}
	public class FqnElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.ocelet.lang.Ocelet.Fqn");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		////------ Data and terminal rules ------
		//Fqn:
		//	ID ('.' ID)*;
		@Override public ParserRule getRule() { return rule; }
		
		//ID ('.' ID)*
		public Group getGroup() { return cGroup; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//('.' ID)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	public class SignedNumberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.ocelet.lang.Ocelet.SignedNumber");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cNumberParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//SignedNumber:
		//	'-'? Number;
		@Override public ParserRule getRule() { return rule; }
		
		//'-'? Number
		public Group getGroup() { return cGroup; }
		
		//'-'?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }
		
		//Number
		public RuleCall getNumberParserRuleCall_1() { return cNumberParserRuleCall_1; }
	}
	
	
	private final ModelElements pModel;
	private final ModElnElements pModEln;
	private final MetadataElements pMetadata;
	private final ParameterElements pParameter;
	private final ParampartElements pParampart;
	private final ParamunitElements pParamunit;
	private final ParamdefaElements pParamdefa;
	private final RangevalsElements pRangevals;
	private final ParadescElements pParadesc;
	private final ParaoptElements pParaopt;
	private final EntityElements pEntity;
	private final EntityElementsElements pEntityElements;
	private final PropertyDefElements pPropertyDef;
	private final ServiceDefElements pServiceDef;
	private final ConstructorDefElements pConstructorDef;
	private final RelationElements pRelation;
	private final RoleElements pRole;
	private final RelElementsElements pRelElements;
	private final RelPropertyDefElements pRelPropertyDef;
	private final InteractionDefElements pInteractionDef;
	private final ComitexprElements pComitexpr;
	private final FilterdefElements pFilterdef;
	private final StrucdefElements pStrucdef;
	private final StrucElnElements pStrucEln;
	private final StrucVarDefElements pStrucVarDef;
	private final StrucFuncDefElements pStrucFuncDef;
	private final DatafacerElements pDatafacer;
	private final MatchElements pMatch;
	private final MatchtypeElements pMatchtype;
	private final MdefElements pMdef;
	private final AgregdefElements pAgregdef;
	private final ScenarioElements pScenario;
	private final XVariableDeclarationElements pXVariableDeclaration;
	private final XMemberFeatureCallElements pXMemberFeatureCall;
	private final StaticQualifierElements pStaticQualifier;
	private final FqnElements pFqn;
	private final SignedNumberElements pSignedNumber;
	
	private final Grammar grammar;
	
	private final XbaseGrammarAccess gaXbase;
	
	private final XtypeGrammarAccess gaXtype;

	@Inject
	public OceletGrammarAccess(GrammarProvider grammarProvider,
			XbaseGrammarAccess gaXbase,
			XtypeGrammarAccess gaXtype) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaXbase = gaXbase;
		this.gaXtype = gaXtype;
		this.pModel = new ModelElements();
		this.pModEln = new ModElnElements();
		this.pMetadata = new MetadataElements();
		this.pParameter = new ParameterElements();
		this.pParampart = new ParampartElements();
		this.pParamunit = new ParamunitElements();
		this.pParamdefa = new ParamdefaElements();
		this.pRangevals = new RangevalsElements();
		this.pParadesc = new ParadescElements();
		this.pParaopt = new ParaoptElements();
		this.pEntity = new EntityElements();
		this.pEntityElements = new EntityElementsElements();
		this.pPropertyDef = new PropertyDefElements();
		this.pServiceDef = new ServiceDefElements();
		this.pConstructorDef = new ConstructorDefElements();
		this.pRelation = new RelationElements();
		this.pRole = new RoleElements();
		this.pRelElements = new RelElementsElements();
		this.pRelPropertyDef = new RelPropertyDefElements();
		this.pInteractionDef = new InteractionDefElements();
		this.pComitexpr = new ComitexprElements();
		this.pFilterdef = new FilterdefElements();
		this.pStrucdef = new StrucdefElements();
		this.pStrucEln = new StrucElnElements();
		this.pStrucVarDef = new StrucVarDefElements();
		this.pStrucFuncDef = new StrucFuncDefElements();
		this.pDatafacer = new DatafacerElements();
		this.pMatch = new MatchElements();
		this.pMatchtype = new MatchtypeElements();
		this.pMdef = new MdefElements();
		this.pAgregdef = new AgregdefElements();
		this.pScenario = new ScenarioElements();
		this.pXVariableDeclaration = new XVariableDeclarationElements();
		this.pXMemberFeatureCall = new XMemberFeatureCallElements();
		this.pStaticQualifier = new StaticQualifierElements();
		this.pFqn = new FqnElements();
		this.pSignedNumber = new SignedNumberElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("fr.ocelet.lang.Ocelet".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public XbaseGrammarAccess getXbaseGrammarAccess() {
		return gaXbase;
	}
	
	public XtypeGrammarAccess getXtypeGrammarAccess() {
		return gaXtype;
	}

	
	//Model:
	//	('package' name=Fqn)?
	//	modelns+=ModEln*;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//ModEln:
	//	Entity | Relation | Scenario | Strucdef | Datafacer | Metadata | Agregdef;
	public ModElnElements getModElnAccess() {
		return pModEln;
	}
	
	public ParserRule getModElnRule() {
		return getModElnAccess().getRule();
	}
	
	//// ------ Metadata ------
	//Metadata:
	//	{Metadata}
	//	'metadata' '{' ('description' desc=STRING)? ('webpage' webp=STRING)?
	//	paramdefs+=Parameter*
	//	'}';
	public MetadataElements getMetadataAccess() {
		return pMetadata;
	}
	
	public ParserRule getMetadataRule() {
		return getMetadataAccess().getRule();
	}
	
	//Parameter:
	//	'parameter' ptype=JvmTypeReference name=ID '{'
	//	paramparts+=Parampart*
	//	'}';
	public ParameterElements getParameterAccess() {
		return pParameter;
	}
	
	public ParserRule getParameterRule() {
		return getParameterAccess().getRule();
	}
	
	//Parampart:
	//	Paramunit | Paramdefa | Rangevals | Paradesc | Paraopt;
	public ParampartElements getParampartAccess() {
		return pParampart;
	}
	
	public ParserRule getParampartRule() {
		return getParampartAccess().getRule();
	}
	
	//Paramunit:
	//	'unit' parunit=STRING;
	public ParamunitElements getParamunitAccess() {
		return pParamunit;
	}
	
	public ParserRule getParamunitRule() {
		return getParamunitAccess().getRule();
	}
	
	//Paramdefa:
	//	'default' pardefa=(SignedNumber | STRING | 'null' | 'false' | 'true');
	public ParamdefaElements getParamdefaAccess() {
		return pParamdefa;
	}
	
	public ParserRule getParamdefaRule() {
		return getParamdefaAccess().getRule();
	}
	
	//Rangevals:
	//	'range' parmin=SignedNumber '..' parmax=SignedNumber;
	public RangevalsElements getRangevalsAccess() {
		return pRangevals;
	}
	
	public ParserRule getRangevalsRule() {
		return getRangevalsAccess().getRule();
	}
	
	//Paradesc:
	//	'description' pardesc=STRING;
	public ParadescElements getParadescAccess() {
		return pParadesc;
	}
	
	public ParserRule getParadescRule() {
		return getParadescAccess().getRule();
	}
	
	//Paraopt:
	//	'optional' paropt=STRING;
	public ParaoptElements getParaoptAccess() {
		return pParaopt;
	}
	
	public ParserRule getParaoptRule() {
		return getParaoptAccess().getRule();
	}
	
	//// ------ Entity ------
	//Entity:
	//	'entity' name=ID '{'
	//	entelns+=EntityElements*
	//	'}';
	public EntityElements getEntityAccess() {
		return pEntity;
	}
	
	public ParserRule getEntityRule() {
		return getEntityAccess().getRule();
	}
	
	//EntityElements:
	//	PropertyDef | ServiceDef | ConstructorDef;
	public EntityElementsElements getEntityElementsAccess() {
		return pEntityElements;
	}
	
	public ParserRule getEntityElementsRule() {
		return getEntityElementsAccess().getRule();
	}
	
	//PropertyDef:
	//	'property' type=JvmTypeReference name=ID;
	public PropertyDefElements getPropertyDefAccess() {
		return pPropertyDef;
	}
	
	public ParserRule getPropertyDefRule() {
		return getPropertyDefAccess().getRule();
	}
	
	//ServiceDef:
	//	'service' type=JvmTypeReference? name=ID '(' (params+=FullJvmFormalParameter (',' params+=FullJvmFormalParameter)*)?
	//	')'
	//	body=XBlockExpression;
	public ServiceDefElements getServiceDefAccess() {
		return pServiceDef;
	}
	
	public ParserRule getServiceDefRule() {
		return getServiceDefAccess().getRule();
	}
	
	//ConstructorDef:
	//	'init' name=ID '(' (params+=FullJvmFormalParameter (',' params+=FullJvmFormalParameter)*)? ')'
	//	body=XBlockExpression;
	public ConstructorDefElements getConstructorDefAccess() {
		return pConstructorDef;
	}
	
	public ParserRule getConstructorDefRule() {
		return getConstructorDefAccess().getRule();
	}
	
	//// ------ Relation ------
	//Relation:
	//	'relation' name=ID '<' roles+=Role ',' roles+=Role (',' roles+=Role)* '>' '{'
	//	//	('type' graphtype =Fqn )?
	//	relelns+=RelElements*
	//	'}';
	public RelationElements getRelationAccess() {
		return pRelation;
	}
	
	public ParserRule getRelationRule() {
		return getRelationAccess().getRule();
	}
	
	//Role:
	//	type=[Entity] name=ID;
	public RoleElements getRoleAccess() {
		return pRole;
	}
	
	public ParserRule getRoleRule() {
		return getRoleAccess().getRule();
	}
	
	//RelElements:
	//	RelPropertyDef | InteractionDef | Filterdef;
	public RelElementsElements getRelElementsAccess() {
		return pRelElements;
	}
	
	public ParserRule getRelElementsRule() {
		return getRelElementsAccess().getRule();
	}
	
	//RelPropertyDef:
	//	'property' type=JvmTypeReference name=ID;
	public RelPropertyDefElements getRelPropertyDefAccess() {
		return pRelPropertyDef;
	}
	
	public ParserRule getRelPropertyDefRule() {
		return getRelPropertyDefAccess().getRule();
	}
	
	//InteractionDef:
	//	'interaction' name=ID '(' (params+=FullJvmFormalParameter (',' params+=FullJvmFormalParameter)*)? ')'
	//	body=XBlockExpression ('agg' '{' comitexpressions+=Comitexpr* '}')?;
	public InteractionDefElements getInteractionDefAccess() {
		return pInteractionDef;
	}
	
	public ParserRule getInteractionDefRule() {
		return getInteractionDefAccess().getRule();
	}
	
	//Comitexpr:
	//	rol=[Role] '.' prop=ID (usepreval?='+<<' | '<<') agrfunc=JvmTypeReference;
	public ComitexprElements getComitexprAccess() {
		return pComitexpr;
	}
	
	public ParserRule getComitexprRule() {
		return getComitexprAccess().getRule();
	}
	
	//Filterdef:
	//	'filter' name=ID '(' (params+=FullJvmFormalParameter (',' params+=FullJvmFormalParameter)*)? ')'
	//	body=XBlockExpression;
	public FilterdefElements getFilterdefAccess() {
		return pFilterdef;
	}
	
	public ParserRule getFilterdefRule() {
		return getFilterdefAccess().getRule();
	}
	
	//// ------ Structures ------
	//Strucdef:
	//	'structure' name=ID ('<' typeArgument=Fqn '>')? ('extends' superType=Fqn)?
	//	'{'
	//	strucelns+=StrucEln*
	//	'}';
	public StrucdefElements getStrucdefAccess() {
		return pStrucdef;
	}
	
	public ParserRule getStrucdefRule() {
		return getStrucdefAccess().getRule();
	}
	
	//StrucEln:
	//	StrucVarDef | StrucFuncDef;
	public StrucElnElements getStrucElnAccess() {
		return pStrucEln;
	}
	
	public ParserRule getStrucElnRule() {
		return getStrucElnAccess().getRule();
	}
	
	//StrucVarDef:
	//	type=JvmTypeReference name=ValidID ';'?;
	public StrucVarDefElements getStrucVarDefAccess() {
		return pStrucVarDef;
	}
	
	public ParserRule getStrucVarDefRule() {
		return getStrucVarDefAccess().getRule();
	}
	
	//StrucFuncDef:
	//	'function' type=JvmTypeReference? name=ID
	//	'(' (params+=FullJvmFormalParameter (',' params+=FullJvmFormalParameter)*)? ')'
	//	body=XBlockExpression;
	public StrucFuncDefElements getStrucFuncDefAccess() {
		return pStrucFuncDef;
	}
	
	public ParserRule getStrucFuncDefRule() {
		return getStrucFuncDefAccess().getRule();
	}
	
	//// ------ Datafacer ------
	//Datafacer:
	//	'datafacer' name=ID '{' ('store' | 'data') storetype=ValidID
	//	'(' (arguments+=XExpression (',' arguments+=XExpression)*)? ')'
	//	matchbox+=Match*
	//	'}';
	public DatafacerElements getDatafacerAccess() {
		return pDatafacer;
	}
	
	public ParserRule getDatafacerRule() {
		return getDatafacerAccess().getRule();
	}
	
	//Match:
	//	'match' mtype=[Matchtype] '{'
	//	matchprops+=Mdef*
	//	'}';
	public MatchElements getMatchAccess() {
		return pMatch;
	}
	
	public ParserRule getMatchRule() {
		return getMatchAccess().getRule();
	}
	
	//Matchtype:
	//	Entity | Strucdef;
	public MatchtypeElements getMatchtypeAccess() {
		return pMatchtype;
	}
	
	public ParserRule getMatchtypeRule() {
		return getMatchtypeAccess().getRule();
	}
	
	//Mdef:
	//	prop=ID ':' colname=STRING;
	public MdefElements getMdefAccess() {
		return pMdef;
	}
	
	public ParserRule getMdefRule() {
		return getMdefAccess().getRule();
	}
	
	////------ Agregation functions ------
	//Agregdef:
	//	'aggreg' type=JvmTypeReference name=ID
	//	body=XBlockExpression;
	public AgregdefElements getAgregdefAccess() {
		return pAgregdef;
	}
	
	public ParserRule getAgregdefRule() {
		return getAgregdefAccess().getRule();
	}
	
	////------ Scenario ------
	//Scenario:
	//	'scenario' type=JvmTypeReference? name=ID ('(' (params+=FullJvmFormalParameter (',' params+=FullJvmFormalParameter)*)?
	//	')')?
	//	body=XBlockExpression;
	public ScenarioElements getScenarioAccess() {
		return pScenario;
	}
	
	public ParserRule getScenarioRule() {
		return getScenarioAccess().getRule();
	}
	
	////------ XBase customization ------
	//XVariableDeclaration XExpression:
	//	{XVariableDeclaration} (writeable?=('create' | 'let') | ('fix' | 'const')) (=> (type=JvmTypeReference name=ValidID) |
	//	name=ValidID) ('=' right=XExpression)?;
	public XVariableDeclarationElements getXVariableDeclarationAccess() {
		return pXVariableDeclaration;
	}
	
	public ParserRule getXVariableDeclarationRule() {
		return getXVariableDeclarationAccess().getRule();
	}
	
	//XMemberFeatureCall XExpression:
	//	XPrimaryExpression (=> ({XAssignment.assignable=current} ('.' | explicitStatic?="|")
	//	feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign) value=XAssignment
	//	| => ({XMemberFeatureCall.memberCallTarget=current} ("." | nullSafe?="?." | explicitStatic?="|")) ('<'
	//	typeArguments+=JvmArgumentTypeReference (',' typeArguments+=JvmArgumentTypeReference)* '>')?
	//	feature=[types::JvmIdentifiableElement|IdOrSuper] (=> explicitOperationCall?='(' (memberCallArguments+=XShortClosure
	//	| memberCallArguments+=XExpression (',' memberCallArguments+=XExpression)*)?
	//	')')?
	//	memberCallArguments+=XClosure?)*;
	public XMemberFeatureCallElements getXMemberFeatureCallAccess() {
		return pXMemberFeatureCall;
	}
	
	public ParserRule getXMemberFeatureCallRule() {
		return getXMemberFeatureCallAccess().getRule();
	}
	
	//StaticQualifier:
	//	(ValidID '|')+;
	public StaticQualifierElements getStaticQualifierAccess() {
		return pStaticQualifier;
	}
	
	public ParserRule getStaticQualifierRule() {
		return getStaticQualifierAccess().getRule();
	}
	
	////------ Data and terminal rules ------
	//Fqn:
	//	ID ('.' ID)*;
	public FqnElements getFqnAccess() {
		return pFqn;
	}
	
	public ParserRule getFqnRule() {
		return getFqnAccess().getRule();
	}
	
	//SignedNumber:
	//	'-'? Number;
	public SignedNumberElements getSignedNumberAccess() {
		return pSignedNumber;
	}
	
	public ParserRule getSignedNumberRule() {
		return getSignedNumberAccess().getRule();
	}
	
	//XExpression:
	//	XAssignment;
	public XbaseGrammarAccess.XExpressionElements getXExpressionAccess() {
		return gaXbase.getXExpressionAccess();
	}
	
	public ParserRule getXExpressionRule() {
		return getXExpressionAccess().getRule();
	}
	
	//XAssignment XExpression:
	//	{XAssignment} feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign value=XAssignment | XOrExpression
	//	(=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMultiAssign])
	//	rightOperand=XAssignment)?;
	public XbaseGrammarAccess.XAssignmentElements getXAssignmentAccess() {
		return gaXbase.getXAssignmentAccess();
	}
	
	public ParserRule getXAssignmentRule() {
		return getXAssignmentAccess().getRule();
	}
	
	//OpSingleAssign:
	//	'=';
	public XbaseGrammarAccess.OpSingleAssignElements getOpSingleAssignAccess() {
		return gaXbase.getOpSingleAssignAccess();
	}
	
	public ParserRule getOpSingleAssignRule() {
		return getOpSingleAssignAccess().getRule();
	}
	
	//OpMultiAssign:
	//	'+=' | '-=' | '*=' | '/=' | '%=' |
	//	'<' '<' '=' |
	//	'>' '>'? '>=';
	public XbaseGrammarAccess.OpMultiAssignElements getOpMultiAssignAccess() {
		return gaXbase.getOpMultiAssignAccess();
	}
	
	public ParserRule getOpMultiAssignRule() {
		return getOpMultiAssignAccess().getRule();
	}
	
	//XOrExpression XExpression:
	//	XAndExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOr])
	//	rightOperand=XAndExpression)*;
	public XbaseGrammarAccess.XOrExpressionElements getXOrExpressionAccess() {
		return gaXbase.getXOrExpressionAccess();
	}
	
	public ParserRule getXOrExpressionRule() {
		return getXOrExpressionAccess().getRule();
	}
	
	//OpOr:
	//	'||';
	public XbaseGrammarAccess.OpOrElements getOpOrAccess() {
		return gaXbase.getOpOrAccess();
	}
	
	public ParserRule getOpOrRule() {
		return getOpOrAccess().getRule();
	}
	
	//XAndExpression XExpression:
	//	XEqualityExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAnd])
	//	rightOperand=XEqualityExpression)*;
	public XbaseGrammarAccess.XAndExpressionElements getXAndExpressionAccess() {
		return gaXbase.getXAndExpressionAccess();
	}
	
	public ParserRule getXAndExpressionRule() {
		return getXAndExpressionAccess().getRule();
	}
	
	//OpAnd:
	//	'&&';
	public XbaseGrammarAccess.OpAndElements getOpAndAccess() {
		return gaXbase.getOpAndAccess();
	}
	
	public ParserRule getOpAndRule() {
		return getOpAndAccess().getRule();
	}
	
	//XEqualityExpression XExpression:
	//	XRelationalExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpEquality])
	//	rightOperand=XRelationalExpression)*;
	public XbaseGrammarAccess.XEqualityExpressionElements getXEqualityExpressionAccess() {
		return gaXbase.getXEqualityExpressionAccess();
	}
	
	public ParserRule getXEqualityExpressionRule() {
		return getXEqualityExpressionAccess().getRule();
	}
	
	//OpEquality:
	//	'==' | '!=' | '===' | '!==';
	public XbaseGrammarAccess.OpEqualityElements getOpEqualityAccess() {
		return gaXbase.getOpEqualityAccess();
	}
	
	public ParserRule getOpEqualityRule() {
		return getOpEqualityAccess().getRule();
	}
	
	//XRelationalExpression XExpression:
	//	XOtherOperatorExpression (=> ({XInstanceOfExpression.expression=current} 'instanceof') type=JvmTypeReference |
	//	=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpCompare])
	//	rightOperand=XOtherOperatorExpression)*;
	public XbaseGrammarAccess.XRelationalExpressionElements getXRelationalExpressionAccess() {
		return gaXbase.getXRelationalExpressionAccess();
	}
	
	public ParserRule getXRelationalExpressionRule() {
		return getXRelationalExpressionAccess().getRule();
	}
	
	//OpCompare:
	//	'>=' | '<' '=' | '>' | '<';
	public XbaseGrammarAccess.OpCompareElements getOpCompareAccess() {
		return gaXbase.getOpCompareAccess();
	}
	
	public ParserRule getOpCompareRule() {
		return getOpCompareAccess().getRule();
	}
	
	//XOtherOperatorExpression XExpression:
	//	XAdditiveExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOther])
	//	rightOperand=XAdditiveExpression)*;
	public XbaseGrammarAccess.XOtherOperatorExpressionElements getXOtherOperatorExpressionAccess() {
		return gaXbase.getXOtherOperatorExpressionAccess();
	}
	
	public ParserRule getXOtherOperatorExpressionRule() {
		return getXOtherOperatorExpressionAccess().getRule();
	}
	
	//OpOther:
	//	'->'
	//	| '..<'
	//	| '>' '..'
	//	| '..'
	//	| '=>'
	//	| '>' (=> ('>' '>') | '>') | '<' (=> ('<' '<') | '<' | '=>') | '<>'
	//	| '?:';
	public XbaseGrammarAccess.OpOtherElements getOpOtherAccess() {
		return gaXbase.getOpOtherAccess();
	}
	
	public ParserRule getOpOtherRule() {
		return getOpOtherAccess().getRule();
	}
	
	//XAdditiveExpression XExpression:
	//	XMultiplicativeExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAdd])
	//	rightOperand=XMultiplicativeExpression)*;
	public XbaseGrammarAccess.XAdditiveExpressionElements getXAdditiveExpressionAccess() {
		return gaXbase.getXAdditiveExpressionAccess();
	}
	
	public ParserRule getXAdditiveExpressionRule() {
		return getXAdditiveExpressionAccess().getRule();
	}
	
	//OpAdd:
	//	'+' | '-';
	public XbaseGrammarAccess.OpAddElements getOpAddAccess() {
		return gaXbase.getOpAddAccess();
	}
	
	public ParserRule getOpAddRule() {
		return getOpAddAccess().getRule();
	}
	
	//XMultiplicativeExpression XExpression:
	//	XUnaryOperation (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMulti])
	//	rightOperand=XUnaryOperation)*;
	public XbaseGrammarAccess.XMultiplicativeExpressionElements getXMultiplicativeExpressionAccess() {
		return gaXbase.getXMultiplicativeExpressionAccess();
	}
	
	public ParserRule getXMultiplicativeExpressionRule() {
		return getXMultiplicativeExpressionAccess().getRule();
	}
	
	//OpMulti:
	//	'*' | '**' | '/' | '%';
	public XbaseGrammarAccess.OpMultiElements getOpMultiAccess() {
		return gaXbase.getOpMultiAccess();
	}
	
	public ParserRule getOpMultiRule() {
		return getOpMultiAccess().getRule();
	}
	
	//XUnaryOperation XExpression:
	//	{XUnaryOperation} feature=[types::JvmIdentifiableElement|OpUnary] operand=XUnaryOperation
	//	| XCastedExpression;
	public XbaseGrammarAccess.XUnaryOperationElements getXUnaryOperationAccess() {
		return gaXbase.getXUnaryOperationAccess();
	}
	
	public ParserRule getXUnaryOperationRule() {
		return getXUnaryOperationAccess().getRule();
	}
	
	//OpUnary:
	//	"!" | "-" | "+";
	public XbaseGrammarAccess.OpUnaryElements getOpUnaryAccess() {
		return gaXbase.getOpUnaryAccess();
	}
	
	public ParserRule getOpUnaryRule() {
		return getOpUnaryAccess().getRule();
	}
	
	//XCastedExpression XExpression:
	//	XPostfixOperation (=> ({XCastedExpression.target=current} 'as') type=JvmTypeReference)*;
	public XbaseGrammarAccess.XCastedExpressionElements getXCastedExpressionAccess() {
		return gaXbase.getXCastedExpressionAccess();
	}
	
	public ParserRule getXCastedExpressionRule() {
		return getXCastedExpressionAccess().getRule();
	}
	
	//XPostfixOperation XExpression:
	//	super::XMemberFeatureCall => ({XPostfixOperation.operand=current} feature=[types::JvmIdentifiableElement|OpPostfix])?;
	public XbaseGrammarAccess.XPostfixOperationElements getXPostfixOperationAccess() {
		return gaXbase.getXPostfixOperationAccess();
	}
	
	public ParserRule getXPostfixOperationRule() {
		return getXPostfixOperationAccess().getRule();
	}
	
	//OpPostfix:
	//	"++" | "--";
	public XbaseGrammarAccess.OpPostfixElements getOpPostfixAccess() {
		return gaXbase.getOpPostfixAccess();
	}
	
	public ParserRule getOpPostfixRule() {
		return getOpPostfixAccess().getRule();
	}
	
	//XPrimaryExpression XExpression:
	//	XConstructorCall | XBlockExpression | XSwitchExpression | XSynchronizedExpression | XFeatureCall | XLiteral |
	//	XIfExpression | XForLoopExpression | XBasicForLoopExpression | XWhileExpression | XDoWhileExpression |
	//	XThrowExpression | XReturnExpression | XTryCatchFinallyExpression | XParenthesizedExpression;
	public XbaseGrammarAccess.XPrimaryExpressionElements getXPrimaryExpressionAccess() {
		return gaXbase.getXPrimaryExpressionAccess();
	}
	
	public ParserRule getXPrimaryExpressionRule() {
		return getXPrimaryExpressionAccess().getRule();
	}
	
	//XLiteral XExpression:
	//	XCollectionLiteral | XClosure | XBooleanLiteral | XNumberLiteral | XNullLiteral | XStringLiteral | XTypeLiteral;
	public XbaseGrammarAccess.XLiteralElements getXLiteralAccess() {
		return gaXbase.getXLiteralAccess();
	}
	
	public ParserRule getXLiteralRule() {
		return getXLiteralAccess().getRule();
	}
	
	//XCollectionLiteral:
	//	XSetLiteral | XListLiteral;
	public XbaseGrammarAccess.XCollectionLiteralElements getXCollectionLiteralAccess() {
		return gaXbase.getXCollectionLiteralAccess();
	}
	
	public ParserRule getXCollectionLiteralRule() {
		return getXCollectionLiteralAccess().getRule();
	}
	
	//XSetLiteral:
	//	{XSetLiteral} '#' '{' (elements+=XExpression (',' elements+=XExpression)*)? '}';
	public XbaseGrammarAccess.XSetLiteralElements getXSetLiteralAccess() {
		return gaXbase.getXSetLiteralAccess();
	}
	
	public ParserRule getXSetLiteralRule() {
		return getXSetLiteralAccess().getRule();
	}
	
	//XListLiteral:
	//	{XListLiteral} '#' '[' (elements+=XExpression (',' elements+=XExpression)*)? ']';
	public XbaseGrammarAccess.XListLiteralElements getXListLiteralAccess() {
		return gaXbase.getXListLiteralAccess();
	}
	
	public ParserRule getXListLiteralRule() {
		return getXListLiteralAccess().getRule();
	}
	
	//XClosure XExpression:
	//	=> ({XClosure}
	//	'[')
	//	=> ((declaredFormalParameters+=JvmFormalParameter (',' declaredFormalParameters+=JvmFormalParameter)*)?
	//	explicitSyntax?='|')?
	//	expression=XExpressionInClosure
	//	']';
	public XbaseGrammarAccess.XClosureElements getXClosureAccess() {
		return gaXbase.getXClosureAccess();
	}
	
	public ParserRule getXClosureRule() {
		return getXClosureAccess().getRule();
	}
	
	//XExpressionInClosure XExpression:
	//	{XBlockExpression} (expressions+=XExpressionOrVarDeclaration ';'?)*;
	public XbaseGrammarAccess.XExpressionInClosureElements getXExpressionInClosureAccess() {
		return gaXbase.getXExpressionInClosureAccess();
	}
	
	public ParserRule getXExpressionInClosureRule() {
		return getXExpressionInClosureAccess().getRule();
	}
	
	//XShortClosure XExpression:
	//	=> ({XClosure} (declaredFormalParameters+=JvmFormalParameter (',' declaredFormalParameters+=JvmFormalParameter)*)?
	//	explicitSyntax?='|') expression=XExpression;
	public XbaseGrammarAccess.XShortClosureElements getXShortClosureAccess() {
		return gaXbase.getXShortClosureAccess();
	}
	
	public ParserRule getXShortClosureRule() {
		return getXShortClosureAccess().getRule();
	}
	
	//XParenthesizedExpression XExpression:
	//	'(' XExpression ')';
	public XbaseGrammarAccess.XParenthesizedExpressionElements getXParenthesizedExpressionAccess() {
		return gaXbase.getXParenthesizedExpressionAccess();
	}
	
	public ParserRule getXParenthesizedExpressionRule() {
		return getXParenthesizedExpressionAccess().getRule();
	}
	
	//XIfExpression XExpression:
	//	{XIfExpression}
	//	'if' '(' if=XExpression ')'
	//	then=XExpression (=> 'else' else=XExpression)?;
	public XbaseGrammarAccess.XIfExpressionElements getXIfExpressionAccess() {
		return gaXbase.getXIfExpressionAccess();
	}
	
	public ParserRule getXIfExpressionRule() {
		return getXIfExpressionAccess().getRule();
	}
	
	//XSwitchExpression XExpression:
	//	{XSwitchExpression}
	//	'switch' (=> ('(' declaredParam=JvmFormalParameter ':') switch=XExpression ')'
	//	| => (declaredParam=JvmFormalParameter ':')? switch=XExpression) '{'
	//	cases+=XCasePart* ('default' ':' default=XExpression)?
	//	'}';
	public XbaseGrammarAccess.XSwitchExpressionElements getXSwitchExpressionAccess() {
		return gaXbase.getXSwitchExpressionAccess();
	}
	
	public ParserRule getXSwitchExpressionRule() {
		return getXSwitchExpressionAccess().getRule();
	}
	
	//XCasePart:
	//	{XCasePart} typeGuard=JvmTypeReference? ('case' case=XExpression)? (':' then=XExpression | fallThrough?=',');
	public XbaseGrammarAccess.XCasePartElements getXCasePartAccess() {
		return gaXbase.getXCasePartAccess();
	}
	
	public ParserRule getXCasePartRule() {
		return getXCasePartAccess().getRule();
	}
	
	//XForLoopExpression XExpression:
	//	=> ({XForLoopExpression}
	//	'for' '(' declaredParam=JvmFormalParameter ':') forExpression=XExpression ')'
	//	eachExpression=XExpression;
	public XbaseGrammarAccess.XForLoopExpressionElements getXForLoopExpressionAccess() {
		return gaXbase.getXForLoopExpressionAccess();
	}
	
	public ParserRule getXForLoopExpressionRule() {
		return getXForLoopExpressionAccess().getRule();
	}
	
	//XBasicForLoopExpression XExpression:
	//	{XBasicForLoopExpression}
	//	'for' '(' (initExpressions+=XExpressionOrVarDeclaration (',' initExpressions+=XExpressionOrVarDeclaration)*)? ';'
	//	expression=XExpression? ';' (updateExpressions+=XExpression (',' updateExpressions+=XExpression)*)? ')'
	//	eachExpression=XExpression;
	public XbaseGrammarAccess.XBasicForLoopExpressionElements getXBasicForLoopExpressionAccess() {
		return gaXbase.getXBasicForLoopExpressionAccess();
	}
	
	public ParserRule getXBasicForLoopExpressionRule() {
		return getXBasicForLoopExpressionAccess().getRule();
	}
	
	//XWhileExpression XExpression:
	//	{XWhileExpression}
	//	'while' '(' predicate=XExpression ')'
	//	body=XExpression;
	public XbaseGrammarAccess.XWhileExpressionElements getXWhileExpressionAccess() {
		return gaXbase.getXWhileExpressionAccess();
	}
	
	public ParserRule getXWhileExpressionRule() {
		return getXWhileExpressionAccess().getRule();
	}
	
	//XDoWhileExpression XExpression:
	//	{XDoWhileExpression}
	//	'do'
	//	body=XExpression
	//	'while' '(' predicate=XExpression ')';
	public XbaseGrammarAccess.XDoWhileExpressionElements getXDoWhileExpressionAccess() {
		return gaXbase.getXDoWhileExpressionAccess();
	}
	
	public ParserRule getXDoWhileExpressionRule() {
		return getXDoWhileExpressionAccess().getRule();
	}
	
	//XBlockExpression XExpression:
	//	{XBlockExpression}
	//	'{' (expressions+=XExpressionOrVarDeclaration ';'?)*
	//	'}';
	public XbaseGrammarAccess.XBlockExpressionElements getXBlockExpressionAccess() {
		return gaXbase.getXBlockExpressionAccess();
	}
	
	public ParserRule getXBlockExpressionRule() {
		return getXBlockExpressionAccess().getRule();
	}
	
	//XExpressionOrVarDeclaration XExpression:
	//	super::XVariableDeclaration | XExpression;
	public XbaseGrammarAccess.XExpressionOrVarDeclarationElements getXExpressionOrVarDeclarationAccess() {
		return gaXbase.getXExpressionOrVarDeclarationAccess();
	}
	
	public ParserRule getXExpressionOrVarDeclarationRule() {
		return getXExpressionOrVarDeclarationAccess().getRule();
	}
	
	//JvmFormalParameter types::JvmFormalParameter:
	//	parameterType=JvmTypeReference? name=ValidID;
	public XbaseGrammarAccess.JvmFormalParameterElements getJvmFormalParameterAccess() {
		return gaXbase.getJvmFormalParameterAccess();
	}
	
	public ParserRule getJvmFormalParameterRule() {
		return getJvmFormalParameterAccess().getRule();
	}
	
	//FullJvmFormalParameter types::JvmFormalParameter:
	//	parameterType=JvmTypeReference name=ValidID;
	public XbaseGrammarAccess.FullJvmFormalParameterElements getFullJvmFormalParameterAccess() {
		return gaXbase.getFullJvmFormalParameterAccess();
	}
	
	public ParserRule getFullJvmFormalParameterRule() {
		return getFullJvmFormalParameterAccess().getRule();
	}
	
	//XFeatureCall XExpression:
	//	{XFeatureCall} ('<' typeArguments+=JvmArgumentTypeReference (',' typeArguments+=JvmArgumentTypeReference)* '>')?
	//	feature=[types::JvmIdentifiableElement|IdOrSuper] (=> explicitOperationCall?='(' (featureCallArguments+=XShortClosure
	//	| featureCallArguments+=XExpression (',' featureCallArguments+=XExpression)*)?
	//	')')?
	//	featureCallArguments+=XClosure?;
	public XbaseGrammarAccess.XFeatureCallElements getXFeatureCallAccess() {
		return gaXbase.getXFeatureCallAccess();
	}
	
	public ParserRule getXFeatureCallRule() {
		return getXFeatureCallAccess().getRule();
	}
	
	//FeatureCallID:
	//	ValidID | 'extends' | 'static' | 'import' | 'extension';
	public XbaseGrammarAccess.FeatureCallIDElements getFeatureCallIDAccess() {
		return gaXbase.getFeatureCallIDAccess();
	}
	
	public ParserRule getFeatureCallIDRule() {
		return getFeatureCallIDAccess().getRule();
	}
	
	//IdOrSuper:
	//	FeatureCallID | 'super';
	public XbaseGrammarAccess.IdOrSuperElements getIdOrSuperAccess() {
		return gaXbase.getIdOrSuperAccess();
	}
	
	public ParserRule getIdOrSuperRule() {
		return getIdOrSuperAccess().getRule();
	}
	
	//XConstructorCall XExpression:
	//	{XConstructorCall}
	//	'new' constructor=[types::JvmConstructor|QualifiedName] (=> '<' typeArguments+=JvmArgumentTypeReference (','
	//	typeArguments+=JvmArgumentTypeReference)* '>')? (=> explicitConstructorCall?='(' (arguments+=XShortClosure
	//	| arguments+=XExpression (',' arguments+=XExpression)*)?
	//	')')?
	//	arguments+=XClosure?;
	public XbaseGrammarAccess.XConstructorCallElements getXConstructorCallAccess() {
		return gaXbase.getXConstructorCallAccess();
	}
	
	public ParserRule getXConstructorCallRule() {
		return getXConstructorCallAccess().getRule();
	}
	
	//XBooleanLiteral XExpression:
	//	{XBooleanLiteral} ('false' | isTrue?='true');
	public XbaseGrammarAccess.XBooleanLiteralElements getXBooleanLiteralAccess() {
		return gaXbase.getXBooleanLiteralAccess();
	}
	
	public ParserRule getXBooleanLiteralRule() {
		return getXBooleanLiteralAccess().getRule();
	}
	
	//XNullLiteral XExpression:
	//	{XNullLiteral} 'null';
	public XbaseGrammarAccess.XNullLiteralElements getXNullLiteralAccess() {
		return gaXbase.getXNullLiteralAccess();
	}
	
	public ParserRule getXNullLiteralRule() {
		return getXNullLiteralAccess().getRule();
	}
	
	//XNumberLiteral XExpression:
	//	{XNumberLiteral} value=Number;
	public XbaseGrammarAccess.XNumberLiteralElements getXNumberLiteralAccess() {
		return gaXbase.getXNumberLiteralAccess();
	}
	
	public ParserRule getXNumberLiteralRule() {
		return getXNumberLiteralAccess().getRule();
	}
	
	//XStringLiteral XExpression:
	//	{XStringLiteral} value=STRING;
	public XbaseGrammarAccess.XStringLiteralElements getXStringLiteralAccess() {
		return gaXbase.getXStringLiteralAccess();
	}
	
	public ParserRule getXStringLiteralRule() {
		return getXStringLiteralAccess().getRule();
	}
	
	//XTypeLiteral XExpression:
	//	{XTypeLiteral} 'typeof' '(' type=[types::JvmType|QualifiedName] arrayDimensions+=ArrayBrackets* ')';
	public XbaseGrammarAccess.XTypeLiteralElements getXTypeLiteralAccess() {
		return gaXbase.getXTypeLiteralAccess();
	}
	
	public ParserRule getXTypeLiteralRule() {
		return getXTypeLiteralAccess().getRule();
	}
	
	//XThrowExpression XExpression:
	//	{XThrowExpression} 'throw' expression=XExpression;
	public XbaseGrammarAccess.XThrowExpressionElements getXThrowExpressionAccess() {
		return gaXbase.getXThrowExpressionAccess();
	}
	
	public ParserRule getXThrowExpressionRule() {
		return getXThrowExpressionAccess().getRule();
	}
	
	//XReturnExpression XExpression:
	//	{XReturnExpression} 'return' -> expression=XExpression?;
	public XbaseGrammarAccess.XReturnExpressionElements getXReturnExpressionAccess() {
		return gaXbase.getXReturnExpressionAccess();
	}
	
	public ParserRule getXReturnExpressionRule() {
		return getXReturnExpressionAccess().getRule();
	}
	
	//XTryCatchFinallyExpression XExpression:
	//	{XTryCatchFinallyExpression}
	//	'try'
	//	expression=XExpression (catchClauses+=XCatchClause+ (=> 'finally' finallyExpression=XExpression)?
	//	| 'finally' finallyExpression=XExpression);
	public XbaseGrammarAccess.XTryCatchFinallyExpressionElements getXTryCatchFinallyExpressionAccess() {
		return gaXbase.getXTryCatchFinallyExpressionAccess();
	}
	
	public ParserRule getXTryCatchFinallyExpressionRule() {
		return getXTryCatchFinallyExpressionAccess().getRule();
	}
	
	//XSynchronizedExpression XExpression:
	//	=> ({XSynchronizedExpression}
	//	'synchronized' '(') param=XExpression ')' expression=XExpression;
	public XbaseGrammarAccess.XSynchronizedExpressionElements getXSynchronizedExpressionAccess() {
		return gaXbase.getXSynchronizedExpressionAccess();
	}
	
	public ParserRule getXSynchronizedExpressionRule() {
		return getXSynchronizedExpressionAccess().getRule();
	}
	
	//XCatchClause:
	//	=> 'catch' '(' declaredParam=FullJvmFormalParameter ')' expression=XExpression;
	public XbaseGrammarAccess.XCatchClauseElements getXCatchClauseAccess() {
		return gaXbase.getXCatchClauseAccess();
	}
	
	public ParserRule getXCatchClauseRule() {
		return getXCatchClauseAccess().getRule();
	}
	
	//QualifiedName:
	//	ValidID (=> '.' ValidID)*;
	public XbaseGrammarAccess.QualifiedNameElements getQualifiedNameAccess() {
		return gaXbase.getQualifiedNameAccess();
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}
	
	//Number hidden():
	//	HEX | (INT | DECIMAL) ('.' (INT | DECIMAL))?;
	public XbaseGrammarAccess.NumberElements getNumberAccess() {
		return gaXbase.getNumberAccess();
	}
	
	public ParserRule getNumberRule() {
		return getNumberAccess().getRule();
	}
	
	//terminal HEX:
	//	('0x' | '0X') ('0'..'9' | 'a'..'f' | 'A'..'F' | '_')+ ('#' (('b' | 'B') ('i' | 'I') | ('l' | 'L')))?;
	public TerminalRule getHEXRule() {
		return gaXbase.getHEXRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9' ('0'..'9' | '_')*;
	public TerminalRule getINTRule() {
		return gaXbase.getINTRule();
	}
	
	//terminal DECIMAL:
	//	INT (('e' | 'E') ('+' | '-')? INT)? (('b' | 'B') ('i' | 'I' | 'd' | 'D') | ('l' | 'L' | 'd' | 'D' | 'f' | 'F'))?;
	public TerminalRule getDECIMALRule() {
		return gaXbase.getDECIMALRule();
	}
	
	//JvmTypeReference:
	//	JvmParameterizedTypeReference => ({JvmGenericArrayTypeReference.componentType=current} ArrayBrackets)*
	//	| XFunctionTypeRef;
	public XtypeGrammarAccess.JvmTypeReferenceElements getJvmTypeReferenceAccess() {
		return gaXtype.getJvmTypeReferenceAccess();
	}
	
	public ParserRule getJvmTypeReferenceRule() {
		return getJvmTypeReferenceAccess().getRule();
	}
	
	//ArrayBrackets:
	//	'[' ']';
	public XtypeGrammarAccess.ArrayBracketsElements getArrayBracketsAccess() {
		return gaXtype.getArrayBracketsAccess();
	}
	
	public ParserRule getArrayBracketsRule() {
		return getArrayBracketsAccess().getRule();
	}
	
	//XFunctionTypeRef:
	//	('(' (paramTypes+=JvmTypeReference (',' paramTypes+=JvmTypeReference)*)? ')')? '=>' returnType=JvmTypeReference;
	public XtypeGrammarAccess.XFunctionTypeRefElements getXFunctionTypeRefAccess() {
		return gaXtype.getXFunctionTypeRefAccess();
	}
	
	public ParserRule getXFunctionTypeRefRule() {
		return getXFunctionTypeRefAccess().getRule();
	}
	
	//JvmParameterizedTypeReference:
	//	type=[JvmType|super::QualifiedName] (=> '<' arguments+=JvmArgumentTypeReference (','
	//	arguments+=JvmArgumentTypeReference)* '>' (=> ({JvmInnerTypeReference.outer=current} '.') type=[JvmType|ValidID] (=>
	//	'<' arguments+=JvmArgumentTypeReference (',' arguments+=JvmArgumentTypeReference)* '>')?)*)?;
	public XtypeGrammarAccess.JvmParameterizedTypeReferenceElements getJvmParameterizedTypeReferenceAccess() {
		return gaXtype.getJvmParameterizedTypeReferenceAccess();
	}
	
	public ParserRule getJvmParameterizedTypeReferenceRule() {
		return getJvmParameterizedTypeReferenceAccess().getRule();
	}
	
	//JvmArgumentTypeReference JvmTypeReference:
	//	JvmTypeReference | JvmWildcardTypeReference;
	public XtypeGrammarAccess.JvmArgumentTypeReferenceElements getJvmArgumentTypeReferenceAccess() {
		return gaXtype.getJvmArgumentTypeReferenceAccess();
	}
	
	public ParserRule getJvmArgumentTypeReferenceRule() {
		return getJvmArgumentTypeReferenceAccess().getRule();
	}
	
	//JvmWildcardTypeReference:
	//	{JvmWildcardTypeReference} '?' (constraints+=JvmUpperBound constraints+=JvmUpperBoundAnded*
	//	| constraints+=JvmLowerBound constraints+=JvmLowerBoundAnded*)?;
	public XtypeGrammarAccess.JvmWildcardTypeReferenceElements getJvmWildcardTypeReferenceAccess() {
		return gaXtype.getJvmWildcardTypeReferenceAccess();
	}
	
	public ParserRule getJvmWildcardTypeReferenceRule() {
		return getJvmWildcardTypeReferenceAccess().getRule();
	}
	
	//JvmUpperBound:
	//	'extends' typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmUpperBoundElements getJvmUpperBoundAccess() {
		return gaXtype.getJvmUpperBoundAccess();
	}
	
	public ParserRule getJvmUpperBoundRule() {
		return getJvmUpperBoundAccess().getRule();
	}
	
	//JvmUpperBoundAnded JvmUpperBound:
	//	'&' typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmUpperBoundAndedElements getJvmUpperBoundAndedAccess() {
		return gaXtype.getJvmUpperBoundAndedAccess();
	}
	
	public ParserRule getJvmUpperBoundAndedRule() {
		return getJvmUpperBoundAndedAccess().getRule();
	}
	
	//JvmLowerBound:
	//	'super' typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmLowerBoundElements getJvmLowerBoundAccess() {
		return gaXtype.getJvmLowerBoundAccess();
	}
	
	public ParserRule getJvmLowerBoundRule() {
		return getJvmLowerBoundAccess().getRule();
	}
	
	//JvmLowerBoundAnded JvmLowerBound:
	//	'&' typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmLowerBoundAndedElements getJvmLowerBoundAndedAccess() {
		return gaXtype.getJvmLowerBoundAndedAccess();
	}
	
	public ParserRule getJvmLowerBoundAndedRule() {
		return getJvmLowerBoundAndedAccess().getRule();
	}
	
	//JvmTypeParameter:
	//	name=ValidID (constraints+=JvmUpperBound constraints+=JvmUpperBoundAnded*)?;
	public XtypeGrammarAccess.JvmTypeParameterElements getJvmTypeParameterAccess() {
		return gaXtype.getJvmTypeParameterAccess();
	}
	
	public ParserRule getJvmTypeParameterRule() {
		return getJvmTypeParameterAccess().getRule();
	}
	
	//QualifiedNameWithWildcard:
	//	super::QualifiedName '.' '*';
	public XtypeGrammarAccess.QualifiedNameWithWildcardElements getQualifiedNameWithWildcardAccess() {
		return gaXtype.getQualifiedNameWithWildcardAccess();
	}
	
	public ParserRule getQualifiedNameWithWildcardRule() {
		return getQualifiedNameWithWildcardAccess().getRule();
	}
	
	//ValidID:
	//	ID;
	public XtypeGrammarAccess.ValidIDElements getValidIDAccess() {
		return gaXtype.getValidIDAccess();
	}
	
	public ParserRule getValidIDRule() {
		return getValidIDAccess().getRule();
	}
	
	//XImportSection:
	//	importDeclarations+=XImportDeclaration+;
	public XtypeGrammarAccess.XImportSectionElements getXImportSectionAccess() {
		return gaXtype.getXImportSectionAccess();
	}
	
	public ParserRule getXImportSectionRule() {
		return getXImportSectionAccess().getRule();
	}
	
	//XImportDeclaration:
	//	'import' (static?='static' extension?='extension'? importedType=[JvmDeclaredType|QualifiedNameInStaticImport]
	//	(wildcard?='*' | memberName=ValidID) | importedType=[JvmDeclaredType|super::QualifiedName] |
	//	importedNamespace=QualifiedNameWithWildcard) ';'?;
	public XtypeGrammarAccess.XImportDeclarationElements getXImportDeclarationAccess() {
		return gaXtype.getXImportDeclarationAccess();
	}
	
	public ParserRule getXImportDeclarationRule() {
		return getXImportDeclarationAccess().getRule();
	}
	
	//QualifiedNameInStaticImport:
	//	(ValidID '.')+;
	public XtypeGrammarAccess.QualifiedNameInStaticImportElements getQualifiedNameInStaticImportAccess() {
		return gaXtype.getQualifiedNameInStaticImportAccess();
	}
	
	public ParserRule getQualifiedNameInStaticImportRule() {
		return getQualifiedNameInStaticImportAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '$' | '_') ('a'..'z' | 'A'..'Z' | '$' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaXtype.getIDRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"'? |
	//	"'" ('\\' . | !('\\' | "'"))* "'"?;
	public TerminalRule getSTRINGRule() {
		return gaXtype.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaXtype.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaXtype.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaXtype.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaXtype.getANY_OTHERRule();
	}
}
