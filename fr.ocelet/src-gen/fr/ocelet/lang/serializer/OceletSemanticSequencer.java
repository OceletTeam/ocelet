/*
 * generated by Xtext 2.12.0
 */
package fr.ocelet.lang.serializer;

import com.google.inject.Inject;
import fr.ocelet.lang.ocelet.Agregdef;
import fr.ocelet.lang.ocelet.Comitexpr;
import fr.ocelet.lang.ocelet.ConstructorDef;
import fr.ocelet.lang.ocelet.Datafacer;
import fr.ocelet.lang.ocelet.Entity;
import fr.ocelet.lang.ocelet.Filterdef;
import fr.ocelet.lang.ocelet.InteractionDef;
import fr.ocelet.lang.ocelet.Match;
import fr.ocelet.lang.ocelet.Mdef;
import fr.ocelet.lang.ocelet.Metadata;
import fr.ocelet.lang.ocelet.Model;
import fr.ocelet.lang.ocelet.OceletPackage;
import fr.ocelet.lang.ocelet.Paradesc;
import fr.ocelet.lang.ocelet.Paramdefa;
import fr.ocelet.lang.ocelet.Paramunit;
import fr.ocelet.lang.ocelet.Paraopt;
import fr.ocelet.lang.ocelet.PropertyDef;
import fr.ocelet.lang.ocelet.Rangevals;
import fr.ocelet.lang.ocelet.RelPropertyDef;
import fr.ocelet.lang.ocelet.Relation;
import fr.ocelet.lang.ocelet.Role;
import fr.ocelet.lang.ocelet.Scenario;
import fr.ocelet.lang.ocelet.ServiceDef;
import fr.ocelet.lang.ocelet.StrucFuncDef;
import fr.ocelet.lang.ocelet.StrucVarDef;
import fr.ocelet.lang.ocelet.Strucdef;
import fr.ocelet.lang.services.OceletGrammarAccess;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.common.types.JvmFormalParameter;
import org.eclipse.xtext.common.types.JvmGenericArrayTypeReference;
import org.eclipse.xtext.common.types.JvmInnerTypeReference;
import org.eclipse.xtext.common.types.JvmLowerBound;
import org.eclipse.xtext.common.types.JvmParameterizedTypeReference;
import org.eclipse.xtext.common.types.JvmTypeParameter;
import org.eclipse.xtext.common.types.JvmUpperBound;
import org.eclipse.xtext.common.types.JvmWildcardTypeReference;
import org.eclipse.xtext.common.types.TypesPackage;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.eclipse.xtext.xbase.XAssignment;
import org.eclipse.xtext.xbase.XBasicForLoopExpression;
import org.eclipse.xtext.xbase.XBinaryOperation;
import org.eclipse.xtext.xbase.XBlockExpression;
import org.eclipse.xtext.xbase.XBooleanLiteral;
import org.eclipse.xtext.xbase.XCasePart;
import org.eclipse.xtext.xbase.XCastedExpression;
import org.eclipse.xtext.xbase.XCatchClause;
import org.eclipse.xtext.xbase.XClosure;
import org.eclipse.xtext.xbase.XConstructorCall;
import org.eclipse.xtext.xbase.XDoWhileExpression;
import org.eclipse.xtext.xbase.XFeatureCall;
import org.eclipse.xtext.xbase.XForLoopExpression;
import org.eclipse.xtext.xbase.XIfExpression;
import org.eclipse.xtext.xbase.XInstanceOfExpression;
import org.eclipse.xtext.xbase.XListLiteral;
import org.eclipse.xtext.xbase.XMemberFeatureCall;
import org.eclipse.xtext.xbase.XNullLiteral;
import org.eclipse.xtext.xbase.XNumberLiteral;
import org.eclipse.xtext.xbase.XPostfixOperation;
import org.eclipse.xtext.xbase.XReturnExpression;
import org.eclipse.xtext.xbase.XSetLiteral;
import org.eclipse.xtext.xbase.XStringLiteral;
import org.eclipse.xtext.xbase.XSwitchExpression;
import org.eclipse.xtext.xbase.XSynchronizedExpression;
import org.eclipse.xtext.xbase.XThrowExpression;
import org.eclipse.xtext.xbase.XTryCatchFinallyExpression;
import org.eclipse.xtext.xbase.XTypeLiteral;
import org.eclipse.xtext.xbase.XUnaryOperation;
import org.eclipse.xtext.xbase.XVariableDeclaration;
import org.eclipse.xtext.xbase.XWhileExpression;
import org.eclipse.xtext.xbase.XbasePackage;
import org.eclipse.xtext.xbase.serializer.XbaseSemanticSequencer;
import org.eclipse.xtext.xtype.XFunctionTypeRef;
import org.eclipse.xtext.xtype.XImportDeclaration;
import org.eclipse.xtext.xtype.XImportSection;
import org.eclipse.xtext.xtype.XtypePackage;

@SuppressWarnings("all")
public class OceletSemanticSequencer extends XbaseSemanticSequencer {

	@Inject
	private OceletGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == OceletPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case OceletPackage.AGREGDEF:
				sequence_Agregdef(context, (Agregdef) semanticObject); 
				return; 
			case OceletPackage.COMITEXPR:
				sequence_Comitexpr(context, (Comitexpr) semanticObject); 
				return; 
			case OceletPackage.CONSTRUCTOR_DEF:
				sequence_ConstructorDef(context, (ConstructorDef) semanticObject); 
				return; 
			case OceletPackage.DATAFACER:
				sequence_Datafacer(context, (Datafacer) semanticObject); 
				return; 
			case OceletPackage.ENTITY:
				sequence_Entity(context, (Entity) semanticObject); 
				return; 
			case OceletPackage.FILTERDEF:
				sequence_Filterdef(context, (Filterdef) semanticObject); 
				return; 
			case OceletPackage.INTERACTION_DEF:
				sequence_InteractionDef(context, (InteractionDef) semanticObject); 
				return; 
			case OceletPackage.MATCH:
				sequence_Match(context, (Match) semanticObject); 
				return; 
			case OceletPackage.MDEF:
				sequence_Mdef(context, (Mdef) semanticObject); 
				return; 
			case OceletPackage.METADATA:
				sequence_Metadata(context, (Metadata) semanticObject); 
				return; 
			case OceletPackage.MODEL:
				sequence_Model(context, (Model) semanticObject); 
				return; 
			case OceletPackage.PARADESC:
				sequence_Paradesc(context, (Paradesc) semanticObject); 
				return; 
			case OceletPackage.PARAMDEFA:
				sequence_Paramdefa(context, (Paramdefa) semanticObject); 
				return; 
			case OceletPackage.PARAMETER:
				sequence_Parameter(context, (fr.ocelet.lang.ocelet.Parameter) semanticObject); 
				return; 
			case OceletPackage.PARAMUNIT:
				sequence_Paramunit(context, (Paramunit) semanticObject); 
				return; 
			case OceletPackage.PARAOPT:
				sequence_Paraopt(context, (Paraopt) semanticObject); 
				return; 
			case OceletPackage.PROPERTY_DEF:
				sequence_PropertyDef(context, (PropertyDef) semanticObject); 
				return; 
			case OceletPackage.RANGEVALS:
				sequence_Rangevals(context, (Rangevals) semanticObject); 
				return; 
			case OceletPackage.REL_PROPERTY_DEF:
				sequence_RelPropertyDef(context, (RelPropertyDef) semanticObject); 
				return; 
			case OceletPackage.RELATION:
				sequence_Relation(context, (Relation) semanticObject); 
				return; 
			case OceletPackage.ROLE:
				sequence_Role(context, (Role) semanticObject); 
				return; 
			case OceletPackage.SCENARIO:
				sequence_Scenario(context, (Scenario) semanticObject); 
				return; 
			case OceletPackage.SERVICE_DEF:
				sequence_ServiceDef(context, (ServiceDef) semanticObject); 
				return; 
			case OceletPackage.STRUC_FUNC_DEF:
				sequence_StrucFuncDef(context, (StrucFuncDef) semanticObject); 
				return; 
			case OceletPackage.STRUC_VAR_DEF:
				sequence_StrucVarDef(context, (StrucVarDef) semanticObject); 
				return; 
			case OceletPackage.STRUCDEF:
				sequence_Strucdef(context, (Strucdef) semanticObject); 
				return; 
			}
		else if (epackage == TypesPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case TypesPackage.JVM_FORMAL_PARAMETER:
				if (rule == grammarAccess.getFullJvmFormalParameterRule()) {
					sequence_FullJvmFormalParameter(context, (JvmFormalParameter) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getJvmFormalParameterRule()) {
					sequence_JvmFormalParameter(context, (JvmFormalParameter) semanticObject); 
					return; 
				}
				else break;
			case TypesPackage.JVM_GENERIC_ARRAY_TYPE_REFERENCE:
				sequence_JvmTypeReference(context, (JvmGenericArrayTypeReference) semanticObject); 
				return; 
			case TypesPackage.JVM_INNER_TYPE_REFERENCE:
				sequence_JvmParameterizedTypeReference(context, (JvmInnerTypeReference) semanticObject); 
				return; 
			case TypesPackage.JVM_LOWER_BOUND:
				if (rule == grammarAccess.getJvmLowerBoundAndedRule()) {
					sequence_JvmLowerBoundAnded(context, (JvmLowerBound) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getJvmLowerBoundRule()) {
					sequence_JvmLowerBound(context, (JvmLowerBound) semanticObject); 
					return; 
				}
				else break;
			case TypesPackage.JVM_PARAMETERIZED_TYPE_REFERENCE:
				if (action == grammarAccess.getJvmParameterizedTypeReferenceAccess().getJvmInnerTypeReferenceOuterAction_1_4_0_0_0()) {
					sequence_JvmParameterizedTypeReference_JvmInnerTypeReference_1_4_0_0_0(context, (JvmParameterizedTypeReference) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getJvmTypeReferenceRule()
						|| action == grammarAccess.getJvmTypeReferenceAccess().getJvmGenericArrayTypeReferenceComponentTypeAction_0_1_0_0()
						|| rule == grammarAccess.getJvmParameterizedTypeReferenceRule()
						|| rule == grammarAccess.getJvmArgumentTypeReferenceRule()) {
					sequence_JvmParameterizedTypeReference(context, (JvmParameterizedTypeReference) semanticObject); 
					return; 
				}
				else break;
			case TypesPackage.JVM_TYPE_PARAMETER:
				sequence_JvmTypeParameter(context, (JvmTypeParameter) semanticObject); 
				return; 
			case TypesPackage.JVM_UPPER_BOUND:
				if (rule == grammarAccess.getJvmUpperBoundAndedRule()) {
					sequence_JvmUpperBoundAnded(context, (JvmUpperBound) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getJvmUpperBoundRule()) {
					sequence_JvmUpperBound(context, (JvmUpperBound) semanticObject); 
					return; 
				}
				else break;
			case TypesPackage.JVM_WILDCARD_TYPE_REFERENCE:
				sequence_JvmWildcardTypeReference(context, (JvmWildcardTypeReference) semanticObject); 
				return; 
			}
		else if (epackage == XbasePackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case XbasePackage.XASSIGNMENT:
				sequence_XAssignment_XMemberFeatureCall(context, (XAssignment) semanticObject); 
				return; 
			case XbasePackage.XBASIC_FOR_LOOP_EXPRESSION:
				sequence_XBasicForLoopExpression(context, (XBasicForLoopExpression) semanticObject); 
				return; 
			case XbasePackage.XBINARY_OPERATION:
				sequence_XAdditiveExpression_XAndExpression_XAssignment_XEqualityExpression_XMultiplicativeExpression_XOrExpression_XOtherOperatorExpression_XRelationalExpression(context, (XBinaryOperation) semanticObject); 
				return; 
			case XbasePackage.XBLOCK_EXPRESSION:
				if (rule == grammarAccess.getXMemberFeatureCallRule()
						|| action == grammarAccess.getXMemberFeatureCallAccess().getXAssignmentAssignableAction_1_0_0_0_0()
						|| action == grammarAccess.getXMemberFeatureCallAccess().getXMemberFeatureCallMemberCallTargetAction_1_1_0_0_0()
						|| rule == grammarAccess.getXExpressionRule()
						|| rule == grammarAccess.getXAssignmentRule()
						|| action == grammarAccess.getXAssignmentAccess().getXBinaryOperationLeftOperandAction_1_1_0_0_0()
						|| rule == grammarAccess.getXOrExpressionRule()
						|| action == grammarAccess.getXOrExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXAndExpressionRule()
						|| action == grammarAccess.getXAndExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXEqualityExpressionRule()
						|| action == grammarAccess.getXEqualityExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXRelationalExpressionRule()
						|| action == grammarAccess.getXRelationalExpressionAccess().getXInstanceOfExpressionExpressionAction_1_0_0_0_0()
						|| action == grammarAccess.getXRelationalExpressionAccess().getXBinaryOperationLeftOperandAction_1_1_0_0_0()
						|| rule == grammarAccess.getXOtherOperatorExpressionRule()
						|| action == grammarAccess.getXOtherOperatorExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXAdditiveExpressionRule()
						|| action == grammarAccess.getXAdditiveExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXMultiplicativeExpressionRule()
						|| action == grammarAccess.getXMultiplicativeExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXUnaryOperationRule()
						|| rule == grammarAccess.getXCastedExpressionRule()
						|| action == grammarAccess.getXCastedExpressionAccess().getXCastedExpressionTargetAction_1_0_0_0()
						|| rule == grammarAccess.getXPostfixOperationRule()
						|| action == grammarAccess.getXPostfixOperationAccess().getXPostfixOperationOperandAction_1_0_0()
						|| rule == grammarAccess.getXPrimaryExpressionRule()
						|| rule == grammarAccess.getXParenthesizedExpressionRule()
						|| rule == grammarAccess.getXBlockExpressionRule()
						|| rule == grammarAccess.getXExpressionOrVarDeclarationRule()) {
					sequence_XBlockExpression(context, (XBlockExpression) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getXExpressionInClosureRule()) {
					sequence_XExpressionInClosure(context, (XBlockExpression) semanticObject); 
					return; 
				}
				else break;
			case XbasePackage.XBOOLEAN_LITERAL:
				sequence_XBooleanLiteral(context, (XBooleanLiteral) semanticObject); 
				return; 
			case XbasePackage.XCASE_PART:
				sequence_XCasePart(context, (XCasePart) semanticObject); 
				return; 
			case XbasePackage.XCASTED_EXPRESSION:
				sequence_XCastedExpression(context, (XCastedExpression) semanticObject); 
				return; 
			case XbasePackage.XCATCH_CLAUSE:
				sequence_XCatchClause(context, (XCatchClause) semanticObject); 
				return; 
			case XbasePackage.XCLOSURE:
				if (rule == grammarAccess.getXMemberFeatureCallRule()
						|| action == grammarAccess.getXMemberFeatureCallAccess().getXAssignmentAssignableAction_1_0_0_0_0()
						|| action == grammarAccess.getXMemberFeatureCallAccess().getXMemberFeatureCallMemberCallTargetAction_1_1_0_0_0()
						|| rule == grammarAccess.getXExpressionRule()
						|| rule == grammarAccess.getXAssignmentRule()
						|| action == grammarAccess.getXAssignmentAccess().getXBinaryOperationLeftOperandAction_1_1_0_0_0()
						|| rule == grammarAccess.getXOrExpressionRule()
						|| action == grammarAccess.getXOrExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXAndExpressionRule()
						|| action == grammarAccess.getXAndExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXEqualityExpressionRule()
						|| action == grammarAccess.getXEqualityExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXRelationalExpressionRule()
						|| action == grammarAccess.getXRelationalExpressionAccess().getXInstanceOfExpressionExpressionAction_1_0_0_0_0()
						|| action == grammarAccess.getXRelationalExpressionAccess().getXBinaryOperationLeftOperandAction_1_1_0_0_0()
						|| rule == grammarAccess.getXOtherOperatorExpressionRule()
						|| action == grammarAccess.getXOtherOperatorExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXAdditiveExpressionRule()
						|| action == grammarAccess.getXAdditiveExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXMultiplicativeExpressionRule()
						|| action == grammarAccess.getXMultiplicativeExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXUnaryOperationRule()
						|| rule == grammarAccess.getXCastedExpressionRule()
						|| action == grammarAccess.getXCastedExpressionAccess().getXCastedExpressionTargetAction_1_0_0_0()
						|| rule == grammarAccess.getXPostfixOperationRule()
						|| action == grammarAccess.getXPostfixOperationAccess().getXPostfixOperationOperandAction_1_0_0()
						|| rule == grammarAccess.getXPrimaryExpressionRule()
						|| rule == grammarAccess.getXLiteralRule()
						|| rule == grammarAccess.getXClosureRule()
						|| rule == grammarAccess.getXParenthesizedExpressionRule()
						|| rule == grammarAccess.getXExpressionOrVarDeclarationRule()) {
					sequence_XClosure(context, (XClosure) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getXShortClosureRule()) {
					sequence_XShortClosure(context, (XClosure) semanticObject); 
					return; 
				}
				else break;
			case XbasePackage.XCONSTRUCTOR_CALL:
				sequence_XConstructorCall(context, (XConstructorCall) semanticObject); 
				return; 
			case XbasePackage.XDO_WHILE_EXPRESSION:
				sequence_XDoWhileExpression(context, (XDoWhileExpression) semanticObject); 
				return; 
			case XbasePackage.XFEATURE_CALL:
				sequence_XFeatureCall(context, (XFeatureCall) semanticObject); 
				return; 
			case XbasePackage.XFOR_LOOP_EXPRESSION:
				sequence_XForLoopExpression(context, (XForLoopExpression) semanticObject); 
				return; 
			case XbasePackage.XIF_EXPRESSION:
				sequence_XIfExpression(context, (XIfExpression) semanticObject); 
				return; 
			case XbasePackage.XINSTANCE_OF_EXPRESSION:
				sequence_XRelationalExpression(context, (XInstanceOfExpression) semanticObject); 
				return; 
			case XbasePackage.XLIST_LITERAL:
				sequence_XListLiteral(context, (XListLiteral) semanticObject); 
				return; 
			case XbasePackage.XMEMBER_FEATURE_CALL:
				sequence_XMemberFeatureCall(context, (XMemberFeatureCall) semanticObject); 
				return; 
			case XbasePackage.XNULL_LITERAL:
				sequence_XNullLiteral(context, (XNullLiteral) semanticObject); 
				return; 
			case XbasePackage.XNUMBER_LITERAL:
				sequence_XNumberLiteral(context, (XNumberLiteral) semanticObject); 
				return; 
			case XbasePackage.XPOSTFIX_OPERATION:
				sequence_XPostfixOperation(context, (XPostfixOperation) semanticObject); 
				return; 
			case XbasePackage.XRETURN_EXPRESSION:
				sequence_XReturnExpression(context, (XReturnExpression) semanticObject); 
				return; 
			case XbasePackage.XSET_LITERAL:
				sequence_XSetLiteral(context, (XSetLiteral) semanticObject); 
				return; 
			case XbasePackage.XSTRING_LITERAL:
				sequence_XStringLiteral(context, (XStringLiteral) semanticObject); 
				return; 
			case XbasePackage.XSWITCH_EXPRESSION:
				sequence_XSwitchExpression(context, (XSwitchExpression) semanticObject); 
				return; 
			case XbasePackage.XSYNCHRONIZED_EXPRESSION:
				sequence_XSynchronizedExpression(context, (XSynchronizedExpression) semanticObject); 
				return; 
			case XbasePackage.XTHROW_EXPRESSION:
				sequence_XThrowExpression(context, (XThrowExpression) semanticObject); 
				return; 
			case XbasePackage.XTRY_CATCH_FINALLY_EXPRESSION:
				sequence_XTryCatchFinallyExpression(context, (XTryCatchFinallyExpression) semanticObject); 
				return; 
			case XbasePackage.XTYPE_LITERAL:
				sequence_XTypeLiteral(context, (XTypeLiteral) semanticObject); 
				return; 
			case XbasePackage.XUNARY_OPERATION:
				sequence_XUnaryOperation(context, (XUnaryOperation) semanticObject); 
				return; 
			case XbasePackage.XVARIABLE_DECLARATION:
				sequence_XVariableDeclaration(context, (XVariableDeclaration) semanticObject); 
				return; 
			case XbasePackage.XWHILE_EXPRESSION:
				sequence_XWhileExpression(context, (XWhileExpression) semanticObject); 
				return; 
			}
		else if (epackage == XtypePackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case XtypePackage.XFUNCTION_TYPE_REF:
				sequence_XFunctionTypeRef(context, (XFunctionTypeRef) semanticObject); 
				return; 
			case XtypePackage.XIMPORT_DECLARATION:
				sequence_XImportDeclaration(context, (XImportDeclaration) semanticObject); 
				return; 
			case XtypePackage.XIMPORT_SECTION:
				sequence_XImportSection(context, (XImportSection) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     ModEln returns Agregdef
	 *     Agregdef returns Agregdef
	 *
	 * Constraint:
	 *     (type=JvmTypeReference name=ID body=XBlockExpression)
	 */
	protected void sequence_Agregdef(ISerializationContext context, Agregdef semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, OceletPackage.Literals.AGREGDEF__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, OceletPackage.Literals.AGREGDEF__TYPE));
			if (transientValues.isValueTransient(semanticObject, OceletPackage.Literals.AGREGDEF__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, OceletPackage.Literals.AGREGDEF__NAME));
			if (transientValues.isValueTransient(semanticObject, OceletPackage.Literals.AGREGDEF__BODY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, OceletPackage.Literals.AGREGDEF__BODY));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAgregdefAccess().getTypeJvmTypeReferenceParserRuleCall_1_0(), semanticObject.getType());
		feeder.accept(grammarAccess.getAgregdefAccess().getNameIDTerminalRuleCall_2_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getAgregdefAccess().getBodyXBlockExpressionParserRuleCall_3_0(), semanticObject.getBody());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Comitexpr returns Comitexpr
	 *
	 * Constraint:
	 *     (rol=[Role|ID] prop=ID usepreval?='+<<'? agrfunc=JvmTypeReference)
	 */
	protected void sequence_Comitexpr(ISerializationContext context, Comitexpr semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EntityElements returns ConstructorDef
	 *     ConstructorDef returns ConstructorDef
	 *
	 * Constraint:
	 *     (name=ID (params+=FullJvmFormalParameter params+=FullJvmFormalParameter*)? body=XBlockExpression)
	 */
	protected void sequence_ConstructorDef(ISerializationContext context, ConstructorDef semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ModEln returns Datafacer
	 *     Datafacer returns Datafacer
	 *
	 * Constraint:
	 *     (name=ID storetype=ValidID (arguments+=XExpression arguments+=XExpression*)? matchbox+=Match*)
	 */
	protected void sequence_Datafacer(ISerializationContext context, Datafacer semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ModEln returns Entity
	 *     Entity returns Entity
	 *     Matchtype returns Entity
	 *
	 * Constraint:
	 *     (name=ID entelns+=EntityElements*)
	 */
	protected void sequence_Entity(ISerializationContext context, Entity semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     RelElements returns Filterdef
	 *     Filterdef returns Filterdef
	 *
	 * Constraint:
	 *     (name=ID (params+=FullJvmFormalParameter params+=FullJvmFormalParameter*)? body=XBlockExpression)
	 */
	protected void sequence_Filterdef(ISerializationContext context, Filterdef semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     RelElements returns InteractionDef
	 *     InteractionDef returns InteractionDef
	 *
	 * Constraint:
	 *     (name=ID (params+=FullJvmFormalParameter params+=FullJvmFormalParameter*)? body=XBlockExpression comitexpressions+=Comitexpr*)
	 */
	protected void sequence_InteractionDef(ISerializationContext context, InteractionDef semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Match returns Match
	 *
	 * Constraint:
	 *     (mtype=[Matchtype|ID] matchprops+=Mdef*)
	 */
	protected void sequence_Match(ISerializationContext context, Match semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Mdef returns Mdef
	 *
	 * Constraint:
	 *     (prop=ID colname=STRING)
	 */
	protected void sequence_Mdef(ISerializationContext context, Mdef semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, OceletPackage.Literals.MDEF__PROP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, OceletPackage.Literals.MDEF__PROP));
			if (transientValues.isValueTransient(semanticObject, OceletPackage.Literals.MDEF__COLNAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, OceletPackage.Literals.MDEF__COLNAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMdefAccess().getPropIDTerminalRuleCall_0_0(), semanticObject.getProp());
		feeder.accept(grammarAccess.getMdefAccess().getColnameSTRINGTerminalRuleCall_2_0(), semanticObject.getColname());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ModEln returns Metadata
	 *     Metadata returns Metadata
	 *
	 * Constraint:
	 *     (desc=STRING? webp=STRING? paramdefs+=Parameter*)
	 */
	protected void sequence_Metadata(ISerializationContext context, Metadata semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Model returns Model
	 *
	 * Constraint:
	 *     ((name=Fqn modelns+=ModEln+) | modelns+=ModEln+)?
	 */
	protected void sequence_Model(ISerializationContext context, Model semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Parampart returns Paradesc
	 *     Paradesc returns Paradesc
	 *
	 * Constraint:
	 *     pardesc=STRING
	 */
	protected void sequence_Paradesc(ISerializationContext context, Paradesc semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, OceletPackage.Literals.PARADESC__PARDESC) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, OceletPackage.Literals.PARADESC__PARDESC));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getParadescAccess().getPardescSTRINGTerminalRuleCall_1_0(), semanticObject.getPardesc());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Parampart returns Paramdefa
	 *     Paramdefa returns Paramdefa
	 *
	 * Constraint:
	 *     (pardefa=SignedNumber | pardefa=STRING | pardefa='null' | pardefa='false' | pardefa='true')
	 */
	protected void sequence_Paramdefa(ISerializationContext context, Paramdefa semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Parameter returns Parameter
	 *
	 * Constraint:
	 *     (ptype=JvmTypeReference name=ID paramparts+=Parampart*)
	 */
	protected void sequence_Parameter(ISerializationContext context, fr.ocelet.lang.ocelet.Parameter semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Parampart returns Paramunit
	 *     Paramunit returns Paramunit
	 *
	 * Constraint:
	 *     parunit=STRING
	 */
	protected void sequence_Paramunit(ISerializationContext context, Paramunit semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, OceletPackage.Literals.PARAMUNIT__PARUNIT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, OceletPackage.Literals.PARAMUNIT__PARUNIT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getParamunitAccess().getParunitSTRINGTerminalRuleCall_1_0(), semanticObject.getParunit());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Parampart returns Paraopt
	 *     Paraopt returns Paraopt
	 *
	 * Constraint:
	 *     paropt=STRING
	 */
	protected void sequence_Paraopt(ISerializationContext context, Paraopt semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, OceletPackage.Literals.PARAOPT__PAROPT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, OceletPackage.Literals.PARAOPT__PAROPT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getParaoptAccess().getParoptSTRINGTerminalRuleCall_1_0(), semanticObject.getParopt());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     EntityElements returns PropertyDef
	 *     PropertyDef returns PropertyDef
	 *
	 * Constraint:
	 *     (type=JvmTypeReference name=ID)
	 */
	protected void sequence_PropertyDef(ISerializationContext context, PropertyDef semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, OceletPackage.Literals.PROPERTY_DEF__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, OceletPackage.Literals.PROPERTY_DEF__TYPE));
			if (transientValues.isValueTransient(semanticObject, OceletPackage.Literals.ENTITY_ELEMENTS__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, OceletPackage.Literals.ENTITY_ELEMENTS__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPropertyDefAccess().getTypeJvmTypeReferenceParserRuleCall_1_0(), semanticObject.getType());
		feeder.accept(grammarAccess.getPropertyDefAccess().getNameIDTerminalRuleCall_2_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Parampart returns Rangevals
	 *     Rangevals returns Rangevals
	 *
	 * Constraint:
	 *     (parmin=SignedNumber parmax=SignedNumber)
	 */
	protected void sequence_Rangevals(ISerializationContext context, Rangevals semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, OceletPackage.Literals.RANGEVALS__PARMIN) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, OceletPackage.Literals.RANGEVALS__PARMIN));
			if (transientValues.isValueTransient(semanticObject, OceletPackage.Literals.RANGEVALS__PARMAX) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, OceletPackage.Literals.RANGEVALS__PARMAX));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getRangevalsAccess().getParminSignedNumberParserRuleCall_1_0(), semanticObject.getParmin());
		feeder.accept(grammarAccess.getRangevalsAccess().getParmaxSignedNumberParserRuleCall_3_0(), semanticObject.getParmax());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     RelElements returns RelPropertyDef
	 *     RelPropertyDef returns RelPropertyDef
	 *
	 * Constraint:
	 *     (type=JvmTypeReference name=ID)
	 */
	protected void sequence_RelPropertyDef(ISerializationContext context, RelPropertyDef semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, OceletPackage.Literals.REL_PROPERTY_DEF__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, OceletPackage.Literals.REL_PROPERTY_DEF__TYPE));
			if (transientValues.isValueTransient(semanticObject, OceletPackage.Literals.REL_ELEMENTS__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, OceletPackage.Literals.REL_ELEMENTS__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getRelPropertyDefAccess().getTypeJvmTypeReferenceParserRuleCall_1_0(), semanticObject.getType());
		feeder.accept(grammarAccess.getRelPropertyDefAccess().getNameIDTerminalRuleCall_2_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ModEln returns Relation
	 *     Relation returns Relation
	 *
	 * Constraint:
	 *     (name=ID roles+=Role roles+=Role roles+=Role* relelns+=RelElements*)
	 */
	protected void sequence_Relation(ISerializationContext context, Relation semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Role returns Role
	 *
	 * Constraint:
	 *     (type=[Entity|ID] name=ID)
	 */
	protected void sequence_Role(ISerializationContext context, Role semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, OceletPackage.Literals.ROLE__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, OceletPackage.Literals.ROLE__TYPE));
			if (transientValues.isValueTransient(semanticObject, OceletPackage.Literals.ROLE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, OceletPackage.Literals.ROLE__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getRoleAccess().getTypeEntityIDTerminalRuleCall_0_0_1(), semanticObject.eGet(OceletPackage.Literals.ROLE__TYPE, false));
		feeder.accept(grammarAccess.getRoleAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ModEln returns Scenario
	 *     Scenario returns Scenario
	 *
	 * Constraint:
	 *     (type=JvmTypeReference? name=ID (params+=FullJvmFormalParameter params+=FullJvmFormalParameter*)? body=XBlockExpression)
	 */
	protected void sequence_Scenario(ISerializationContext context, Scenario semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EntityElements returns ServiceDef
	 *     ServiceDef returns ServiceDef
	 *
	 * Constraint:
	 *     (type=JvmTypeReference? name=ID (params+=FullJvmFormalParameter params+=FullJvmFormalParameter*)? body=XBlockExpression)
	 */
	protected void sequence_ServiceDef(ISerializationContext context, ServiceDef semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     StrucEln returns StrucFuncDef
	 *     StrucFuncDef returns StrucFuncDef
	 *
	 * Constraint:
	 *     (type=JvmTypeReference? name=ID (params+=FullJvmFormalParameter params+=FullJvmFormalParameter*)? body=XBlockExpression)
	 */
	protected void sequence_StrucFuncDef(ISerializationContext context, StrucFuncDef semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     StrucEln returns StrucVarDef
	 *     StrucVarDef returns StrucVarDef
	 *
	 * Constraint:
	 *     (type=JvmTypeReference name=ValidID)
	 */
	protected void sequence_StrucVarDef(ISerializationContext context, StrucVarDef semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, OceletPackage.Literals.STRUC_ELN__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, OceletPackage.Literals.STRUC_ELN__TYPE));
			if (transientValues.isValueTransient(semanticObject, OceletPackage.Literals.STRUC_ELN__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, OceletPackage.Literals.STRUC_ELN__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getStrucVarDefAccess().getTypeJvmTypeReferenceParserRuleCall_0_0(), semanticObject.getType());
		feeder.accept(grammarAccess.getStrucVarDefAccess().getNameValidIDParserRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ModEln returns Strucdef
	 *     Strucdef returns Strucdef
	 *     Matchtype returns Strucdef
	 *
	 * Constraint:
	 *     (name=ID typeArgument=Fqn? superType=Fqn? strucelns+=StrucEln*)
	 */
	protected void sequence_Strucdef(ISerializationContext context, Strucdef semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     XMemberFeatureCall returns XAssignment
	 *     XMemberFeatureCall.XAssignment_1_0_0_0_0 returns XAssignment
	 *     XMemberFeatureCall.XMemberFeatureCall_1_1_0_0_0 returns XAssignment
	 *     XExpression returns XAssignment
	 *     XAssignment returns XAssignment
	 *     XAssignment.XBinaryOperation_1_1_0_0_0 returns XAssignment
	 *     XOrExpression returns XAssignment
	 *     XOrExpression.XBinaryOperation_1_0_0_0 returns XAssignment
	 *     XAndExpression returns XAssignment
	 *     XAndExpression.XBinaryOperation_1_0_0_0 returns XAssignment
	 *     XEqualityExpression returns XAssignment
	 *     XEqualityExpression.XBinaryOperation_1_0_0_0 returns XAssignment
	 *     XRelationalExpression returns XAssignment
	 *     XRelationalExpression.XInstanceOfExpression_1_0_0_0_0 returns XAssignment
	 *     XRelationalExpression.XBinaryOperation_1_1_0_0_0 returns XAssignment
	 *     XOtherOperatorExpression returns XAssignment
	 *     XOtherOperatorExpression.XBinaryOperation_1_0_0_0 returns XAssignment
	 *     XAdditiveExpression returns XAssignment
	 *     XAdditiveExpression.XBinaryOperation_1_0_0_0 returns XAssignment
	 *     XMultiplicativeExpression returns XAssignment
	 *     XMultiplicativeExpression.XBinaryOperation_1_0_0_0 returns XAssignment
	 *     XUnaryOperation returns XAssignment
	 *     XCastedExpression returns XAssignment
	 *     XCastedExpression.XCastedExpression_1_0_0_0 returns XAssignment
	 *     XPostfixOperation returns XAssignment
	 *     XPostfixOperation.XPostfixOperation_1_0_0 returns XAssignment
	 *     XPrimaryExpression returns XAssignment
	 *     XParenthesizedExpression returns XAssignment
	 *     XExpressionOrVarDeclaration returns XAssignment
	 *
	 * Constraint:
	 *     (
	 *         (assignable=XMemberFeatureCall_XAssignment_1_0_0_0_0 explicitStatic?='|'? feature=[JvmIdentifiableElement|FeatureCallID] value=XAssignment) | 
	 *         (feature=[JvmIdentifiableElement|FeatureCallID] value=XAssignment)
	 *     )
	 */
	protected void sequence_XAssignment_XMemberFeatureCall(ISerializationContext context, XAssignment semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     XMemberFeatureCall returns XMemberFeatureCall
	 *     XMemberFeatureCall.XAssignment_1_0_0_0_0 returns XMemberFeatureCall
	 *     XMemberFeatureCall.XMemberFeatureCall_1_1_0_0_0 returns XMemberFeatureCall
	 *     XExpression returns XMemberFeatureCall
	 *     XAssignment returns XMemberFeatureCall
	 *     XAssignment.XBinaryOperation_1_1_0_0_0 returns XMemberFeatureCall
	 *     XOrExpression returns XMemberFeatureCall
	 *     XOrExpression.XBinaryOperation_1_0_0_0 returns XMemberFeatureCall
	 *     XAndExpression returns XMemberFeatureCall
	 *     XAndExpression.XBinaryOperation_1_0_0_0 returns XMemberFeatureCall
	 *     XEqualityExpression returns XMemberFeatureCall
	 *     XEqualityExpression.XBinaryOperation_1_0_0_0 returns XMemberFeatureCall
	 *     XRelationalExpression returns XMemberFeatureCall
	 *     XRelationalExpression.XInstanceOfExpression_1_0_0_0_0 returns XMemberFeatureCall
	 *     XRelationalExpression.XBinaryOperation_1_1_0_0_0 returns XMemberFeatureCall
	 *     XOtherOperatorExpression returns XMemberFeatureCall
	 *     XOtherOperatorExpression.XBinaryOperation_1_0_0_0 returns XMemberFeatureCall
	 *     XAdditiveExpression returns XMemberFeatureCall
	 *     XAdditiveExpression.XBinaryOperation_1_0_0_0 returns XMemberFeatureCall
	 *     XMultiplicativeExpression returns XMemberFeatureCall
	 *     XMultiplicativeExpression.XBinaryOperation_1_0_0_0 returns XMemberFeatureCall
	 *     XUnaryOperation returns XMemberFeatureCall
	 *     XCastedExpression returns XMemberFeatureCall
	 *     XCastedExpression.XCastedExpression_1_0_0_0 returns XMemberFeatureCall
	 *     XPostfixOperation returns XMemberFeatureCall
	 *     XPostfixOperation.XPostfixOperation_1_0_0 returns XMemberFeatureCall
	 *     XPrimaryExpression returns XMemberFeatureCall
	 *     XParenthesizedExpression returns XMemberFeatureCall
	 *     XExpressionOrVarDeclaration returns XMemberFeatureCall
	 *
	 * Constraint:
	 *     (
	 *         memberCallTarget=XMemberFeatureCall_XMemberFeatureCall_1_1_0_0_0 
	 *         (nullSafe?='?.' | explicitStatic?='|')? 
	 *         (typeArguments+=JvmArgumentTypeReference typeArguments+=JvmArgumentTypeReference*)? 
	 *         feature=[JvmIdentifiableElement|IdOrSuper] 
	 *         (explicitOperationCall?='(' (memberCallArguments+=XShortClosure | (memberCallArguments+=XExpression memberCallArguments+=XExpression*))?)? 
	 *         memberCallArguments+=XClosure?
	 *     )
	 */
	protected void sequence_XMemberFeatureCall(ISerializationContext context, XMemberFeatureCall semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     XVariableDeclaration returns XVariableDeclaration
	 *     XExpressionOrVarDeclaration returns XVariableDeclaration
	 *
	 * Constraint:
	 *     ((writeable?='create' | writeable?='let')? ((type=JvmTypeReference name=ValidID) | name=ValidID) right=XExpression?)
	 */
	protected void sequence_XVariableDeclaration(ISerializationContext context, XVariableDeclaration semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
